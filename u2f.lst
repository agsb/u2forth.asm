   1               	# 1 "u2f.S"
   1               	
   0               	
   0               	
   2               	/*
   3               	 *  DISCLAIMER:
   4               	 *
   5               	 *  Copyright Â© 2020, Alvaro Barcellos,
   6               	 *  Permission is hereby granted, free of charge, to any person obtaining
   7               	 *  a copy of this software and associated documentation files (the
   8               	 *  "Software"), to deal in the Software without restriction, including
   9               	 *  without limitation the rights to use, copy, modify, merge, publish,
  10               	 *  distribute, sublicense, and/or sell copies of the Software, and to
  11               	 *  permit persons to whom the Software is furnished to do so, subject to
  12               	 *  the following conditions:
  13               	 *
  14               	 *  The above copyright notice and this permission notice shall be
  15               	 *  included in all copies or substantial portions of the Software.
  16               	 *
  17               	 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  18               	 *  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  19               	 *  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
  20               	 *  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
  21               	 *  LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
  22               	 *  OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
  23               	 *  WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  24               	 *
  25               	*/
  26               	
  27               	/* get some magic constants */
  28               	
  29               	;----------------------------------------------------------------------
  30               	#include <avr/io.h>
   1               	/* Copyright (c) 2002,2003,2005,2006,2007 Marek Michalkiewicz, Joerg Wunsch
   2               	   Copyright (c) 2007 Eric B. Weddington
   3               	   All rights reserved.
   4               	
   5               	   Redistribution and use in source and binary forms, with or without
   6               	   modification, are permitted provided that the following conditions are met:
   7               	
   8               	   * Redistributions of source code must retain the above copyright
   9               	     notice, this list of conditions and the following disclaimer.
  10               	
  11               	   * Redistributions in binary form must reproduce the above copyright
  12               	     notice, this list of conditions and the following disclaimer in
  13               	     the documentation and/or other materials provided with the
  14               	     distribution.
  15               	
  16               	   * Neither the name of the copyright holders nor the names of
  17               	     contributors may be used to endorse or promote products derived
  18               	     from this software without specific prior written permission.
  19               	
  20               	  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  21               	  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  22               	  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  23               	  ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  24               	  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  25               	  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  26               	  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  27               	  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  28               	  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  29               	  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  30               	  POSSIBILITY OF SUCH DAMAGE. */
  31               	
  32               	/* $Id$ */
  33               	
  34               	/** \file */
  35               	/** \defgroup avr_io <avr/io.h>: AVR device-specific IO definitions
  36               	    \code #include <avr/io.h> \endcode
  37               	
  38               	    This header file includes the apropriate IO definitions for the
  39               	    device that has been specified by the <tt>-mmcu=</tt> compiler
  40               	    command-line switch.  This is done by diverting to the appropriate
  41               	    file <tt>&lt;avr/io</tt><em>XXXX</em><tt>.h&gt;</tt> which should
  42               	    never be included directly.  Some register names common to all
  43               	    AVR devices are defined directly within <tt>&lt;avr/common.h&gt;</tt>,
  44               	    which is included in <tt>&lt;avr/io.h&gt;</tt>,
  45               	    but most of the details come from the respective include file.
  46               	
  47               	    Note that this file always includes the following files:
  48               	    \code 
  49               	    #include <avr/sfr_defs.h>
  50               	    #include <avr/portpins.h>
  51               	    #include <avr/common.h>
  52               	    #include <avr/version.h>
  53               	    \endcode
  54               	    See \ref avr_sfr for more details about that header file.
  55               	
  56               	    Included are definitions of the IO register set and their
  57               	    respective bit values as specified in the Atmel documentation.
  58               	    Note that inconsistencies in naming conventions,
  59               	    so even identical functions sometimes get different names on
  60               	    different devices.
  61               	
  62               	    Also included are the specific names useable for interrupt
  63               	    function definitions as documented
  64               	    \ref avr_signames "here".
  65               	
  66               	    Finally, the following macros are defined:
  67               	
  68               	    - \b RAMEND
  69               	    <br>
  70               	    The last on-chip RAM address.
  71               	    <br>
  72               	    - \b XRAMEND
  73               	    <br>
  74               	    The last possible RAM location that is addressable. This is equal to 
  75               	    RAMEND for devices that do not allow for external RAM. For devices 
  76               	    that allow external RAM, this will be larger than RAMEND.
  77               	    <br>
  78               	    - \b E2END
  79               	    <br>
  80               	    The last EEPROM address.
  81               	    <br>
  82               	    - \b FLASHEND
  83               	    <br>
  84               	    The last byte address in the Flash program space.
  85               	    <br>
  86               	    - \b SPM_PAGESIZE
  87               	    <br>
  88               	    For devices with bootloader support, the flash pagesize
  89               	    (in bytes) to be used for the \c SPM instruction. 
  90               	    - \b E2PAGESIZE
  91               	    <br>
  92               	    The size of the EEPROM page.
  93               	    
  94               	*/
  95               	
  96               	#ifndef _AVR_IO_H_
  97               	#define _AVR_IO_H_
  98               	
  99               	#include <avr/sfr_defs.h>
   1               	/* Copyright (c) 2002, Marek Michalkiewicz <marekm@amelek.gda.pl>
 100               	
 101               	#if defined (__AVR_AT94K__)
 102               	#  include <avr/ioat94k.h>
 103               	#elif defined (__AVR_AT43USB320__)
 104               	#  include <avr/io43u32x.h>
 105               	#elif defined (__AVR_AT43USB355__)
 106               	#  include <avr/io43u35x.h>
 107               	#elif defined (__AVR_AT76C711__)
 108               	#  include <avr/io76c711.h>
 109               	#elif defined (__AVR_AT86RF401__)
 110               	#  include <avr/io86r401.h>
 111               	#elif defined (__AVR_AT90PWM1__)
 112               	#  include <avr/io90pwm1.h>
 113               	#elif defined (__AVR_AT90PWM2__)
 114               	#  include <avr/io90pwmx.h>
 115               	#elif defined (__AVR_AT90PWM2B__)
 116               	#  include <avr/io90pwm2b.h>
 117               	#elif defined (__AVR_AT90PWM3__)
 118               	#  include <avr/io90pwmx.h>
 119               	#elif defined (__AVR_AT90PWM3B__)
 120               	#  include <avr/io90pwm3b.h>
 121               	#elif defined (__AVR_AT90PWM216__)
 122               	#  include <avr/io90pwm216.h>
 123               	#elif defined (__AVR_AT90PWM316__)
 124               	#  include <avr/io90pwm316.h>
 125               	#elif defined (__AVR_AT90PWM161__)
 126               	#  include <avr/io90pwm161.h>
 127               	#elif defined (__AVR_AT90PWM81__)
 128               	#  include <avr/io90pwm81.h>
 129               	#elif defined (__AVR_ATmega8U2__)
 130               	#  include <avr/iom8u2.h>
 131               	#elif defined (__AVR_ATmega16M1__)
 132               	#  include <avr/iom16m1.h>
 133               	#elif defined (__AVR_ATmega16U2__)
 134               	#  include <avr/iom16u2.h>
 135               	#elif defined (__AVR_ATmega16U4__)
 136               	#  include <avr/iom16u4.h>
 137               	#elif defined (__AVR_ATmega32C1__)
 138               	#  include <avr/iom32c1.h>
 139               	#elif defined (__AVR_ATmega32M1__)
 140               	#  include <avr/iom32m1.h>
 141               	#elif defined (__AVR_ATmega32U2__)
 142               	#  include <avr/iom32u2.h>
 143               	#elif defined (__AVR_ATmega32U4__)
 144               	#  include <avr/iom32u4.h>
 145               	#elif defined (__AVR_ATmega32U6__)
 146               	#  include <avr/iom32u6.h>
 147               	#elif defined (__AVR_ATmega64C1__)
 148               	#  include <avr/iom64c1.h>
 149               	#elif defined (__AVR_ATmega64M1__)
 150               	#  include <avr/iom64m1.h>
 151               	#elif defined (__AVR_ATmega128__)
 152               	#  include <avr/iom128.h>
 153               	#elif defined (__AVR_ATmega128A__)
 154               	#  include <avr/iom128a.h>
 155               	#elif defined (__AVR_ATmega1280__)
 156               	#  include <avr/iom1280.h>
 157               	#elif defined (__AVR_ATmega1281__)
 158               	#  include <avr/iom1281.h>
 159               	#elif defined (__AVR_ATmega1284__)
 160               	#  include <avr/iom1284.h>
 161               	#elif defined (__AVR_ATmega1284P__)
 162               	#  include <avr/iom1284p.h>
 163               	#elif defined (__AVR_ATmega128RFA1__)
 164               	#  include <avr/iom128rfa1.h>
 165               	#elif defined (__AVR_ATmega1284RFR2__)
 166               	#  include <avr/iom1284rfr2.h>
 167               	#elif defined (__AVR_ATmega128RFR2__)
 168               	#  include <avr/iom128rfr2.h>
 169               	#elif defined (__AVR_ATmega2564RFR2__)
 170               	#  include <avr/iom2564rfr2.h>
 171               	#elif defined (__AVR_ATmega256RFR2__)
 172               	#  include <avr/iom256rfr2.h>
 173               	#elif defined (__AVR_ATmega2560__)
 174               	#  include <avr/iom2560.h>
 175               	#elif defined (__AVR_ATmega2561__)
 176               	#  include <avr/iom2561.h>
 177               	#elif defined (__AVR_AT90CAN32__)
 178               	#  include <avr/iocan32.h>
 179               	#elif defined (__AVR_AT90CAN64__)
 180               	#  include <avr/iocan64.h>
 181               	#elif defined (__AVR_AT90CAN128__)
 182               	#  include <avr/iocan128.h>
 183               	#elif defined (__AVR_AT90USB82__)
 184               	#  include <avr/iousb82.h>
 185               	#elif defined (__AVR_AT90USB162__)
 186               	#  include <avr/iousb162.h>
 187               	#elif defined (__AVR_AT90USB646__)
 188               	#  include <avr/iousb646.h>
 189               	#elif defined (__AVR_AT90USB647__)
 190               	#  include <avr/iousb647.h>
 191               	#elif defined (__AVR_AT90USB1286__)
 192               	#  include <avr/iousb1286.h>
 193               	#elif defined (__AVR_AT90USB1287__)
 194               	#  include <avr/iousb1287.h>
 195               	#elif defined (__AVR_ATmega644RFR2__)
 196               	#  include <avr/iom644rfr2.h>
 197               	#elif defined (__AVR_ATmega64RFR2__)
 198               	#  include <avr/iom64rfr2.h>
 199               	#elif defined (__AVR_ATmega64__)
 200               	#  include <avr/iom64.h>
 201               	#elif defined (__AVR_ATmega64A__)
 202               	#  include <avr/iom64a.h>
 203               	#elif defined (__AVR_ATmega640__)
 204               	#  include <avr/iom640.h>
 205               	#elif defined (__AVR_ATmega644__)
 206               	#  include <avr/iom644.h>
 207               	#elif defined (__AVR_ATmega644A__)
 208               	#  include <avr/iom644a.h>
 209               	#elif defined (__AVR_ATmega644P__)
 210               	#  include <avr/iom644p.h>
 211               	#elif defined (__AVR_ATmega644PA__)
 212               	#  include <avr/iom644pa.h>
 213               	#elif defined (__AVR_ATmega645__)
 214               	#  include <avr/iom645.h>
 215               	#elif (defined __AVR_ATmega645A__)
 216               	#include <avr/iom645a.h>
 217               	#elif (defined __AVR_ATmega645P__)
 218               	#include <avr/iom645p.h>
 219               	#elif defined (__AVR_ATmega6450__)
 220               	#  include <avr/iom6450.h>
 221               	#elif (defined __AVR_ATmega6450A__)
 222               	#include <avr/iom6450a.h>
 223               	#elif (defined __AVR_ATmega6450P__)
 224               	#include <avr/iom6450p.h>
 225               	#elif defined (__AVR_ATmega649__)
 226               	#  include <avr/iom649.h>
 227               	#elif (defined __AVR_ATmega649A__)
 228               	#include <avr/iom649a.h>
 229               	#elif defined (__AVR_ATmega6490__)
 230               	#  include <avr/iom6490.h>
 231               	#elif (defined __AVR_ATmega6490A__)
 232               	#include <avr/iom6490a.h>
 233               	#elif (defined __AVR_ATmega6490P__)
 234               	#include <avr/iom6490p.h>
 235               	#elif defined (__AVR_ATmega649P__)
 236               	#  include <avr/iom649p.h>
 237               	#elif defined (__AVR_ATmega64HVE__)
 238               	#  include <avr/iom64hve.h>
 239               	#elif defined (__AVR_ATmega64HVE2__)
 240               	#  include <avr/iom64hve2.h>
 241               	#elif defined (__AVR_ATmega103__)
 242               	#  include <avr/iom103.h>
 243               	#elif defined (__AVR_ATmega32__)
 244               	#  include <avr/iom32.h>
 245               	#elif defined (__AVR_ATmega32A__)
 246               	#  include <avr/iom32a.h>
 247               	#elif defined (__AVR_ATmega323__)
 248               	#  include <avr/iom323.h>
 249               	#elif defined (__AVR_ATmega324P__)
 250               	#  include <avr/iom324p.h>
 251               	#elif (defined __AVR_ATmega324A__)
 252               	#include <avr/iom324a.h>
 253               	#elif defined (__AVR_ATmega324PA__)
 254               	#  include <avr/iom324pa.h>
 255               	#elif defined (__AVR_ATmega325__)
 256               	#  include <avr/iom325.h>
 257               	#elif (defined __AVR_ATmega325A__)
 258               	#include <avr/iom325a.h>
 259               	#elif defined (__AVR_ATmega325P__)
 260               	#  include <avr/iom325p.h>
 261               	#elif defined (__AVR_ATmega325PA__)
 262               	#  include <avr/iom325pa.h>  
 263               	#elif defined (__AVR_ATmega3250__) 
 264               	#  include <avr/iom3250.h>
 265               	#elif (defined __AVR_ATmega3250A__)
 266               	#include <avr/iom3250a.h>
 267               	#elif defined (__AVR_ATmega3250P__)
 268               	#  include <avr/iom3250p.h>
 269               	#elif defined (__AVR_ATmega3250PA__)
 270               	#  include <avr/iom3250pa.h>  
 271               	#elif defined (__AVR_ATmega328P__)
 272               	#  include <avr/iom328p.h>
 273               	#elif (defined __AVR_ATmega328__)
 274               	#include <avr/iom328.h>
 275               	#elif defined (__AVR_ATmega329__)
 276               	#  include <avr/iom329.h>
 277               	#elif (defined __AVR_ATmega329A__)
 278               	#include <avr/iom329a.h>
 279               	#elif defined (__AVR_ATmega329P__) 
 280               	#  include <avr/iom329p.h>
 281               	#elif (defined __AVR_ATmega329PA__)
 282               	#include <avr/iom329pa.h>
 283               	#elif (defined __AVR_ATmega3290PA__)
 284               	#include <avr/iom3290pa.h>
 285               	#elif defined (__AVR_ATmega3290__)
 286               	#  include <avr/iom3290.h>
 287               	#elif (defined __AVR_ATmega3290A__)
 288               	#include <avr/iom3290a.h>
 289               	#elif defined (__AVR_ATmega3290P__)
 290               	#  include <avr/iom3290.h>
 291               	#elif defined (__AVR_ATmega32HVB__)
 292               	#  include <avr/iom32hvb.h>
 293               	#elif defined (__AVR_ATmega32HVBREVB__)
 294               	#  include <avr/iom32hvbrevb.h>
 295               	#elif defined (__AVR_ATmega406__)
 296               	#  include <avr/iom406.h>
 297               	#elif defined (__AVR_ATmega16__)
 298               	#  include <avr/iom16.h>
 299               	#elif defined (__AVR_ATmega16A__)
 300               	#  include <avr/iom16a.h>
 301               	#elif defined (__AVR_ATmega161__)
 302               	#  include <avr/iom161.h>
 303               	#elif defined (__AVR_ATmega162__)
 304               	#  include <avr/iom162.h>
 305               	#elif defined (__AVR_ATmega163__)
 306               	#  include <avr/iom163.h>
 307               	#elif defined (__AVR_ATmega164P__)
 308               	#  include <avr/iom164p.h>
 309               	#elif (defined __AVR_ATmega164A__)
 310               	#include <avr/iom164a.h>
 311               	#elif defined (__AVR_ATmega164PA__)
 312               	#  include <avr/iom164pa.h>
 313               	#elif defined (__AVR_ATmega165__)
 314               	#  include <avr/iom165.h>
 315               	#elif defined (__AVR_ATmega165A__)
 316               	#  include <avr/iom165a.h>
 317               	#elif defined (__AVR_ATmega165P__)
 318               	#  include <avr/iom165p.h>
 319               	#elif defined (__AVR_ATmega165PA__)
 320               	#  include <avr/iom165pa.h>
 321               	#elif defined (__AVR_ATmega168__)
 322               	#  include <avr/iom168.h>
 323               	#elif defined (__AVR_ATmega168A__)
 324               	#  include <avr/iom168a.h>
 325               	#elif defined (__AVR_ATmega168P__)
 326               	#  include <avr/iom168p.h>
 327               	#elif defined (__AVR_ATmega168PA__)
 328               	#  include <avr/iom168pa.h>
 329               	#elif defined (__AVR_ATmega168PB__)
 330               	#  include <avr/iom168pb.h>
 331               	#elif defined (__AVR_ATmega169__)
 332               	#  include <avr/iom169.h>
 333               	#elif (defined __AVR_ATmega169A__)
 334               	#include <avr/iom169a.h>
 335               	#elif defined (__AVR_ATmega169P__)
 336               	#  include <avr/iom169p.h>
 337               	#elif defined (__AVR_ATmega169PA__)
 338               	#  include <avr/iom169pa.h>
 339               	#elif defined (__AVR_ATmega8HVA__)
 340               	#  include <avr/iom8hva.h>
 341               	#elif defined (__AVR_ATmega16HVA__)
 342               	#  include <avr/iom16hva.h>
 343               	#elif defined (__AVR_ATmega16HVA2__)
 344               	#  include <avr/iom16hva2.h>
 345               	#elif defined (__AVR_ATmega16HVB__)
 346               	#  include <avr/iom16hvb.h>
 347               	#elif defined (__AVR_ATmega16HVBREVB__)
 348               	#  include <avr/iom16hvbrevb.h>
 349               	#elif defined (__AVR_ATmega8__)
 350               	#  include <avr/iom8.h>
   1               	/* Copyright (c) 2002, Marek Michalkiewicz
   2               	   All rights reserved.
   3               	
   4               	   Redistribution and use in source and binary forms, with or without
   5               	   modification, are permitted provided that the following conditions are met:
   6               	
   7               	   * Redistributions of source code must retain the above copyright
   8               	     notice, this list of conditions and the following disclaimer.
   9               	
  10               	   * Redistributions in binary form must reproduce the above copyright
  11               	     notice, this list of conditions and the following disclaimer in
  12               	     the documentation and/or other materials provided with the
  13               	     distribution.
  14               	
  15               	   * Neither the name of the copyright holders nor the names of
  16               	     contributors may be used to endorse or promote products derived
  17               	     from this software without specific prior written permission.
  18               	
  19               	  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  20               	  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  21               	  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  22               	  ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  23               	  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  24               	  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  25               	  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  26               	  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  27               	  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  28               	  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  29               	  POSSIBILITY OF SUCH DAMAGE. */
  30               	
  31               	/* $Id: iom8.h 2235 2011-03-17 04:13:14Z arcanum $ */
  32               	
  33               	/* avr/iom8.h - definitions for ATmega8 */
  34               	
  35               	#ifndef _AVR_IOM8_H_
  36               	#define _AVR_IOM8_H_ 1
  37               	
  38               	/* This file should only be included from <avr/io.h>, never directly. */
  39               	
  40               	#ifndef _AVR_IO_H_
  41               	#  error "Include <avr/io.h> instead of this file."
  42               	#endif
  43               	
  44               	#ifndef _AVR_IOXXX_H_
  45               	#  define _AVR_IOXXX_H_ "iom8.h"
  46               	#else
  47               	#  error "Attempt to include more than one <avr/ioXXX.h> file."
  48               	#endif 
  49               	
  50               	/* I/O registers */
  51               	
  52               	/* TWI stands for "Two Wire Interface" or "TWI Was I2C(tm)" */
  53               	#define TWBR	_SFR_IO8(0x00)
  54               	#define TWSR	_SFR_IO8(0x01)
  55               	#define TWAR	_SFR_IO8(0x02)
  56               	#define TWDR	_SFR_IO8(0x03)
  57               	
  58               	/* ADC */
  59               	#define ADCW	_SFR_IO16(0x04)
  60               	#ifndef __ASSEMBLER__
  61               	#define ADC	_SFR_IO16(0x04)
  62               	#endif
  63               	#define ADCL	_SFR_IO8(0x04)
  64               	#define ADCH	_SFR_IO8(0x05)
  65               	#define ADCSR	_SFR_IO8(0x06)
  66               	#define ADCSRA	_SFR_IO8(0x06)  /* Changed in 2486H-AVR-09/02 */
  67               	#define ADMUX	_SFR_IO8(0x07)
  68               	
  69               	/* analog comparator */
  70               	#define ACSR	_SFR_IO8(0x08)
  71               	
  72               	/* USART */
  73               	#define UBRRL	_SFR_IO8(0x09)
  74               	#define UCSRB	_SFR_IO8(0x0A)
  75               	#define UCSRA	_SFR_IO8(0x0B)
  76               	#define UDR	_SFR_IO8(0x0C)
  77               	
  78               	/* SPI */
  79               	#define SPCR	_SFR_IO8(0x0D)
  80               	#define SPSR	_SFR_IO8(0x0E)
  81               	#define SPDR	_SFR_IO8(0x0F)
  82               	
  83               	/* Port D */
  84               	#define PIND	_SFR_IO8(0x10)
  85               	#define DDRD	_SFR_IO8(0x11)
  86               	#define PORTD	_SFR_IO8(0x12)
  87               	
  88               	/* Port C */
  89               	#define PINC	_SFR_IO8(0x13)
  90               	#define DDRC	_SFR_IO8(0x14)
  91               	#define PORTC	_SFR_IO8(0x15)
  92               	
  93               	/* Port B */
  94               	#define PINB	_SFR_IO8(0x16)
  95               	#define DDRB	_SFR_IO8(0x17)
  96               	#define PORTB	_SFR_IO8(0x18)
  97               	
  98               	/* EEPROM Control Register */
  99               	#define EECR	_SFR_IO8(0x1C)
 100               	
 101               	/* EEPROM Data Register */
 102               	#define EEDR	_SFR_IO8(0x1D)
 103               	
 104               	/* EEPROM Address Register */
 105               	#define EEAR	_SFR_IO16(0x1E)
 106               	#define EEARL	_SFR_IO8(0x1E)
 107               	#define EEARH	_SFR_IO8(0x1F)
 108               	
 109               	#define UCSRC	_SFR_IO8(0x20)
 110               	#define UBRRH	_SFR_IO8(0x20)
 111               	
 112               	#define WDTCR	_SFR_IO8(0x21)
 113               	#define ASSR	_SFR_IO8(0x22)
 114               	
 115               	/* Timer 2 */
 116               	#define OCR2	_SFR_IO8(0x23)
 117               	#define TCNT2	_SFR_IO8(0x24)
 118               	#define TCCR2	_SFR_IO8(0x25)
 119               	
 120               	/* Timer 1 */
 121               	#define ICR1	_SFR_IO16(0x26)
 122               	#define ICR1L	_SFR_IO8(0x26)
 123               	#define ICR1H	_SFR_IO8(0x27)
 124               	#define OCR1B	_SFR_IO16(0x28)
 125               	#define OCR1BL	_SFR_IO8(0x28)
 126               	#define OCR1BH	_SFR_IO8(0x29)
 127               	#define OCR1A	_SFR_IO16(0x2A)
 128               	#define OCR1AL	_SFR_IO8(0x2A)
 129               	#define OCR1AH	_SFR_IO8(0x2B)
 130               	#define TCNT1	_SFR_IO16(0x2C)
 131               	#define TCNT1L	_SFR_IO8(0x2C)
 132               	#define TCNT1H	_SFR_IO8(0x2D)
 133               	#define TCCR1B	_SFR_IO8(0x2E)
 134               	#define TCCR1A	_SFR_IO8(0x2F)
 135               	
 136               	#define SFIOR	_SFR_IO8(0x30)
 137               	
 138               	#define OSCCAL	_SFR_IO8(0x31)
 139               	
 140               	/* Timer 0 */
 141               	#define TCNT0	_SFR_IO8(0x32)
 142               	#define TCCR0	_SFR_IO8(0x33)
 143               	
 144               	#define MCUCSR	_SFR_IO8(0x34)
 145               	#define MCUSR   _SFR_IO8(0x34)  /* Defined as an alias for MCUCSR. */
 146               	
 147               	#define MCUCR	_SFR_IO8(0x35)
 148               	
 149               	#define TWCR	_SFR_IO8(0x36)
 150               	
 151               	#define SPMCR	_SFR_IO8(0x37)
 152               	
 153               	#define TIFR	_SFR_IO8(0x38)
 154               	#define TIMSK	_SFR_IO8(0x39)
 155               	
 156               	#define GIFR	_SFR_IO8(0x3A)
 157               	#define GIMSK	_SFR_IO8(0x3B)
 158               	#define GICR	_SFR_IO8(0x3B)   /* Changed in 2486H-AVR-09/02 */
 159               	
 160               	/* 0x3C reserved (OCR0?) */
 161               	
 162               	/* 0x3D..0x3E SP */
 163               	
 164               	/* 0x3F SREG */
 165               	
 166               	/* Interrupt vectors */
 167               	
 168               	/* External Interrupt Request 0 */
 169               	#define INT0_vect_num		1
 170               	#define INT0_vect			_VECTOR(1)
 171               	#define SIG_INTERRUPT0			_VECTOR(1)
 172               	
 173               	/* External Interrupt Request 1 */
 174               	#define INT1_vect_num		2
 175               	#define INT1_vect			_VECTOR(2)
 176               	#define SIG_INTERRUPT1			_VECTOR(2)
 177               	
 178               	/* Timer/Counter2 Compare Match */
 179               	#define TIMER2_COMP_vect_num	3
 180               	#define TIMER2_COMP_vect		_VECTOR(3)
 181               	#define SIG_OUTPUT_COMPARE2		_VECTOR(3)
 182               	
 183               	/* Timer/Counter2 Overflow */
 184               	#define TIMER2_OVF_vect_num		4
 185               	#define TIMER2_OVF_vect			_VECTOR(4)
 186               	#define SIG_OVERFLOW2			_VECTOR(4)
 187               	
 188               	/* Timer/Counter1 Capture Event */
 189               	#define TIMER1_CAPT_vect_num	5
 190               	#define TIMER1_CAPT_vect		_VECTOR(5)
 191               	#define SIG_INPUT_CAPTURE1		_VECTOR(5)
 192               	
 193               	/* Timer/Counter1 Compare Match A */
 194               	#define TIMER1_COMPA_vect_num	6
 195               	#define TIMER1_COMPA_vect		_VECTOR(6)
 196               	#define SIG_OUTPUT_COMPARE1A		_VECTOR(6)
 197               	
 198               	/* Timer/Counter1 Compare Match B */
 199               	#define TIMER1_COMPB_vect_num	7
 200               	#define TIMER1_COMPB_vect		_VECTOR(7)
 201               	#define SIG_OUTPUT_COMPARE1B		_VECTOR(7)
 202               	
 203               	/* Timer/Counter1 Overflow */
 204               	#define TIMER1_OVF_vect_num		8
 205               	#define TIMER1_OVF_vect			_VECTOR(8)
 206               	#define SIG_OVERFLOW1			_VECTOR(8)
 207               	
 208               	/* Timer/Counter0 Overflow */
 209               	#define TIMER0_OVF_vect_num		9
 210               	#define TIMER0_OVF_vect			_VECTOR(9)
 211               	#define SIG_OVERFLOW0			_VECTOR(9)
 212               	
 213               	/* Serial Transfer Complete */
 214               	#define SPI_STC_vect_num		10
 215               	#define SPI_STC_vect			_VECTOR(10)
 216               	#define SIG_SPI				_VECTOR(10)
 217               	
 218               	/* USART, Rx Complete */
 219               	#define USART_RXC_vect_num		11
 220               	#define USART_RXC_vect			_VECTOR(11)
 221               	#define SIG_UART_RECV			_VECTOR(11)
 222               	
 223               	/* USART Data Register Empty */
 224               	#define USART_UDRE_vect_num		12
 225               	#define USART_UDRE_vect			_VECTOR(12)
 226               	#define SIG_UART_DATA			_VECTOR(12)
 227               	
 228               	/* USART, Tx Complete */
 229               	#define USART_TXC_vect_num		13
 230               	#define USART_TXC_vect			_VECTOR(13)
 231               	#define SIG_UART_TRANS			_VECTOR(13)
 232               	
 233               	/* ADC Conversion Complete */
 234               	#define ADC_vect_num		14
 235               	#define ADC_vect			_VECTOR(14)
 236               	#define SIG_ADC				_VECTOR(14)
 237               	
 238               	/* EEPROM Ready */
 239               	#define EE_RDY_vect_num		15
 240               	#define EE_RDY_vect			_VECTOR(15)
 241               	#define SIG_EEPROM_READY		_VECTOR(15)
 242               	
 243               	/* Analog Comparator */
 244               	#define ANA_COMP_vect_num		16
 245               	#define ANA_COMP_vect			_VECTOR(16)
 246               	#define SIG_COMPARATOR			_VECTOR(16)
 247               	
 248               	/* 2-wire Serial Interface */
 249               	#define TWI_vect_num			17
 250               	#define TWI_vect			_VECTOR(17)
 251               	#define SIG_2WIRE_SERIAL		_VECTOR(17)
 252               	
 253               	/* Store Program Memory Ready */
 254               	#define SPM_RDY_vect_num		18
 255               	#define SPM_RDY_vect			_VECTOR(18)
 256               	#define SIG_SPM_READY			_VECTOR(18)
 257               	
 258               	#define _VECTORS_SIZE 38
 259               	
 260               	/* Bit numbers */
 261               	
 262               	/* GIMSK / GICR */
 263               	#define INT1	7
 264               	#define INT0	6
 265               	#define IVSEL	1
 266               	#define IVCE	0
 267               	
 268               	/* GIFR */
 269               	#define INTF1	7
 270               	#define INTF0	6
 271               	
 272               	/* TIMSK */
 273               	#define OCIE2	7
 274               	#define TOIE2	6
 275               	#define TICIE1	5
 276               	#define OCIE1A	4
 277               	#define OCIE1B	3
 278               	#define TOIE1	2
 279               	/* bit 1 reserved (OCIE0?) */
 280               	#define TOIE0	0
 281               	
 282               	/* TIFR */
 283               	#define OCF2	7
 284               	#define TOV2	6
 285               	#define ICF1	5
 286               	#define OCF1A	4
 287               	#define OCF1B	3
 288               	#define TOV1	2
 289               	/* bit 1 reserved (OCF0?) */
 290               	#define TOV0	0
 291               	
 292               	/* SPMCR */
 293               	#define SPMIE	7
 294               	#define RWWSB	6
 295               	/* bit 5 reserved */
 296               	#define RWWSRE	4
 297               	#define BLBSET	3
 298               	#define PGWRT	2
 299               	#define PGERS	1
 300               	#define SPMEN	0
 301               	
 302               	/* TWCR */
 303               	#define TWINT	7
 304               	#define TWEA	6
 305               	#define TWSTA	5
 306               	#define TWSTO	4
 307               	#define TWWC	3
 308               	#define TWEN	2
 309               	/* bit 1 reserved (TWI_TST?) */
 310               	#define TWIE	0
 311               	
 312               	/* TWAR */
 313               	#define TWA6    7
 314               	#define TWA5    6
 315               	#define TWA4    5
 316               	#define TWA3    4
 317               	#define TWA2    3
 318               	#define TWA1    2
 319               	#define TWA0    1
 320               	#define TWGCE	0
 321               	
 322               	/* TWSR */
 323               	#define TWS7	7
 324               	#define TWS6	6
 325               	#define TWS5	5
 326               	#define TWS4	4
 327               	#define TWS3	3
 328               	/* bit 2 reserved */
 329               	#define TWPS1	1
 330               	#define TWPS0	0
 331               	
 332               	/* MCUCR */
 333               	#define SE	7
 334               	#define SM2	6
 335               	#define SM1	5
 336               	#define SM0	4
 337               	#define ISC11	3
 338               	#define ISC10	2
 339               	#define ISC01	1
 340               	#define ISC00	0
 341               	
 342               	/* MCUCSR */
 343               	/* bits 7-4 reserved */
 344               	#define WDRF	3
 345               	#define BORF	2
 346               	#define EXTRF	1
 347               	#define PORF	0
 348               	
 349               	/* 
 350               	   The ADHSM bit has been removed from all documentation, 
 351               	   as being not needed at all since the comparator has proven 
 352               	   to be fast enough even without feeding it more power.
 353               	*/
 354               	
 355               	/* SFIOR */
 356               	/* bits 7-5 reserved */
 357               	#define ACME	3
 358               	#define PUD	2
 359               	#define PSR2	1
 360               	#define PSR10	0
 361               	
 362               	/* TCCR0 */
 363               	/* bits 7-3 reserved */
 364               	#define CS02	2
 365               	#define CS01	1
 366               	#define CS00	0
 367               	
 368               	/* TCCR2 */
 369               	#define FOC2	7
 370               	#define WGM20	6
 371               	#define COM21	5
 372               	#define COM20	4
 373               	#define WGM21	3
 374               	#define CS22	2
 375               	#define CS21	1
 376               	#define CS20	0
 377               	
 378               	/* ASSR */
 379               	/* bits 7-4 reserved */
 380               	#define AS2	3
 381               	#define TCN2UB	2
 382               	#define OCR2UB	1
 383               	#define TCR2UB	0
 384               	
 385               	/* TCCR1A */
 386               	#define COM1A1	7
 387               	#define COM1A0	6
 388               	#define COM1B1	5
 389               	#define COM1B0	4
 390               	#define FOC1A	3
 391               	#define FOC1B	2
 392               	#define WGM11	1
 393               	#define WGM10	0
 394               	
 395               	/* TCCR1B */
 396               	#define ICNC1	7
 397               	#define ICES1	6
 398               	/* bit 5 reserved */
 399               	#define WGM13	4
 400               	#define WGM12	3
 401               	#define CS12	2
 402               	#define CS11	1
 403               	#define CS10	0
 404               	
 405               	/* WDTCR */
 406               	/* bits 7-5 reserved */
 407               	#define WDCE	4
 408               	#define WDE	3
 409               	#define WDP2	2
 410               	#define WDP1	1
 411               	#define WDP0	0
 412               	
 413               	/* UBRRH */
 414               	#define URSEL	7
 415               	
 416               	/* UCSRC */
 417               	#define URSEL	7
 418               	#define UMSEL	6
 419               	#define UPM1	5
 420               	#define UPM0	4
 421               	#define USBS	3
 422               	#define UCSZ1	2
 423               	#define UCSZ0	1
 424               	#define UCPOL	0
 425               	
 426               	/* PORTB */
 427               	#define PB7	7
 428               	#define PB6	6
 429               	#define PB5	5
 430               	#define PB4	4
 431               	#define PB3	3
 432               	#define PB2	2
 433               	#define PB1	1
 434               	#define PB0	0
 435               	
 436               	/* DDRB */
 437               	#define DDB7	7
 438               	#define DDB6	6
 439               	#define DDB5	5
 440               	#define DDB4	4
 441               	#define DDB3	3
 442               	#define DDB2	2
 443               	#define DDB1	1
 444               	#define DDB0	0
 445               	
 446               	/* PINB */
 447               	#define PINB7	7
 448               	#define PINB6	6
 449               	#define PINB5	5
 450               	#define PINB4	4
 451               	#define PINB3	3
 452               	#define PINB2	2
 453               	#define PINB1	1
 454               	#define PINB0	0
 455               	
 456               	/* PORTC */
 457               	#define PC6	 6
 458               	#define PC5	 5
 459               	#define PC4	 4
 460               	#define PC3	 3
 461               	#define PC2	 2
 462               	#define PC1	 1
 463               	#define PC0	 0
 464               	
 465               	/* DDRC */
 466               	#define DDC6	6
 467               	#define DDC5	5
 468               	#define DDC4	4
 469               	#define DDC3	3
 470               	#define DDC2	2
 471               	#define DDC1	1
 472               	#define DDC0	0
 473               	
 474               	/* PINC */
 475               	#define PINC6	6
 476               	#define PINC5	5
 477               	#define PINC4	4
 478               	#define PINC3	3
 479               	#define PINC2	2
 480               	#define PINC1	1
 481               	#define PINC0	0
 482               	
 483               	/* PORTD */
 484               	#define PD7	 7
 485               	#define PD6	 6
 486               	#define PD5	 5
 487               	#define PD4	 4
 488               	#define PD3	 3
 489               	#define PD2	 2
 490               	#define PD1	 1
 491               	#define PD0	 0
 492               	
 493               	/* DDRD */
 494               	#define DDD7	7
 495               	#define DDD6	6
 496               	#define DDD5	5
 497               	#define DDD4	4
 498               	#define DDD3	3
 499               	#define DDD2	2
 500               	#define DDD1	1
 501               	#define DDD0	0
 502               	
 503               	/* PIND */
 504               	#define PIND7	7
 505               	#define PIND6	6
 506               	#define PIND5	5
 507               	#define PIND4	4
 508               	#define PIND3	3
 509               	#define PIND2	2
 510               	#define PIND1	1
 511               	#define PIND0	0
 512               	
 513               	/* SPSR */
 514               	#define SPIF	7
 515               	#define WCOL	6
 516               	#define SPI2X	0
 517               	
 518               	/* SPCR */
 519               	#define SPIE	7
 520               	#define SPE	6
 521               	#define DORD	5
 522               	#define MSTR	4
 523               	#define CPOL	3
 524               	#define CPHA	2
 525               	#define SPR1	1
 526               	#define SPR0	0
 527               	
 528               	/* UCSRA */
 529               	#define RXC	7
 530               	#define TXC	6
 531               	#define UDRE	5
 532               	#define FE	4
 533               	#define DOR	3
 534               	#define PE	2
 535               	#define U2X	1
 536               	#define MPCM	0
 537               	
 538               	/* UCSRB */
 539               	#define RXCIE	7
 540               	#define TXCIE	6
 541               	#define UDRIE	5
 542               	#define RXEN	4
 543               	#define	TXEN	3
 544               	#define UCSZ2	2
 545               	#define RXB8	1
 546               	#define TXB8	0
 547               	
 548               	/* ACSR */
 549               	#define ACD	7
 550               	#define ACBG	6
 551               	#define ACO	5
 552               	#define ACI	4
 553               	#define ACIE	3
 554               	#define ACIC	2
 555               	#define ACIS1	1
 556               	#define ACIS0	0
 557               	
 558               	/* ADCSR / ADCSRA */
 559               	#define ADEN	7
 560               	#define ADSC	6
 561               	#define ADFR	5
 562               	#define ADIF	4
 563               	#define ADIE	3
 564               	#define ADPS2	2
 565               	#define ADPS1	1
 566               	#define ADPS0	0
 567               	
 568               	/* ADMUX */
 569               	#define REFS1	7
 570               	#define REFS0	6
 571               	#define ADLAR	5
 572               	/* bit 4 reserved */
 573               	#define MUX3	3
 574               	#define MUX2	2
 575               	#define MUX1	1
 576               	#define MUX0	0
 577               	
 578               	/* EEPROM Control Register */
 579               	#define EERIE   3
 580               	#define EEMWE   2
 581               	#define EEWE    1
 582               	#define EERE    0
 583               	
 584               	/* Constants */
 585               	#define SPM_PAGESIZE 64
 586               	#define RAMSTART         (0x60)
 587               	#define RAMEND		 0x45F
 588               	#define XRAMEND		 RAMEND
 589               	#define E2END		 0x1FF
 590               	#define E2PAGESIZE   4
 591               	#define FLASHEND	 0x1FFF
 592               	
 593               	
 594               	/* Fuses */
 595               	
 596               	#define FUSE_MEMORY_SIZE 2
 597               	
 598               	/* Low Fuse Byte */
 599               	#define FUSE_CKSEL0      (unsigned char)~_BV(0)
 600               	#define FUSE_CKSEL1      (unsigned char)~_BV(1)
 601               	#define FUSE_CKSEL2      (unsigned char)~_BV(2)
 602               	#define FUSE_CKSEL3      (unsigned char)~_BV(3)
 603               	#define FUSE_SUT0        (unsigned char)~_BV(4)
 604               	#define FUSE_SUT1        (unsigned char)~_BV(5)
 605               	#define FUSE_BODEN       (unsigned char)~_BV(6)
 606               	#define FUSE_BODLEVEL    (unsigned char)~_BV(7)
 607               	#define LFUSE_DEFAULT (FUSE_SUT0 & FUSE_CKSEL3 & FUSE_CKSEL2 & FUSE_CKSEL1)
 608               	
 609               	/* High Fuse Byte */
 610               	#define FUSE_BOOTRST     (unsigned char)~_BV(0)
 611               	#define FUSE_BOOTSZ0     (unsigned char)~_BV(1)
 612               	#define FUSE_BOOTSZ1     (unsigned char)~_BV(2)
 613               	#define FUSE_EESAVE      (unsigned char)~_BV(3)
 614               	#define FUSE_CKOPT       (unsigned char)~_BV(4)
 615               	#define FUSE_SPIEN       (unsigned char)~_BV(5)
 616               	#define FUSE_WDTON       (unsigned char)~_BV(6)
 617               	#define FUSE_RSTDISBL    (unsigned char)~_BV(7)
 618               	#define HFUSE_DEFAULT (FUSE_SPIEN & FUSE_BOOTSZ1 & FUSE_BOOTSZ0)
 619               	
 620               	
 621               	/* Lock Bits */
 622               	#define __LOCK_BITS_EXIST
 623               	#define __BOOT_LOCK_BITS_0_EXIST
 624               	#define __BOOT_LOCK_BITS_1_EXIST 
 625               	
 626               	
 627               	/* Signature */
 628               	#define SIGNATURE_0 0x1E
 629               	#define SIGNATURE_1 0x93
 630               	#define SIGNATURE_2 0x07
 631               	
 632               	
 633               	/* Deprecated items */
 634               	#if !defined(__AVR_LIBC_DEPRECATED_ENABLE__)
 635               	
 636               	#pragma GCC system_header
 637               	
 638               	#pragma GCC poison SIG_INTERRUPT0
 639               	#pragma GCC poison SIG_INTERRUPT1
 640               	#pragma GCC poison SIG_OUTPUT_COMPARE2
 641               	#pragma GCC poison SIG_OVERFLOW2
 642               	#pragma GCC poison SIG_INPUT_CAPTURE1
 643               	#pragma GCC poison SIG_OUTPUT_COMPARE1A
 644               	#pragma GCC poison SIG_OUTPUT_COMPARE1B
 645               	#pragma GCC poison SIG_OVERFLOW1
 646               	#pragma GCC poison SIG_OVERFLOW0
 647               	#pragma GCC poison SIG_SPI
 648               	#pragma GCC poison SIG_UART_RECV
 649               	#pragma GCC poison SIG_UART_DATA
 650               	#pragma GCC poison SIG_UART_TRANS
 651               	#pragma GCC poison SIG_ADC
 652               	#pragma GCC poison SIG_EEPROM_READY
 653               	#pragma GCC poison SIG_COMPARATOR
 654               	#pragma GCC poison SIG_2WIRE_SERIAL
 655               	#pragma GCC poison SIG_SPM_READY
 656               	
 351               	#elif defined (__AVR_ATmega8A__)
 352               	#  include <avr/iom8a.h>
 353               	#elif defined (__AVR_ATmega48__)
 354               	#  include <avr/iom48.h>
 355               	#elif defined (__AVR_ATmega48A__)
 356               	#  include <avr/iom48a.h>
 357               	#elif defined (__AVR_ATmega48PA__)
 358               	#  include <avr/iom48pa.h>
 359               	#elif defined (__AVR_ATmega48PB__)
 360               	#  include <avr/iom48pb.h>
 361               	#elif defined (__AVR_ATmega48P__)
 362               	#  include <avr/iom48p.h>
 363               	#elif defined (__AVR_ATmega88__)
 364               	#  include <avr/iom88.h>
 365               	#elif defined (__AVR_ATmega88A__)
 366               	#  include <avr/iom88a.h>
 367               	#elif defined (__AVR_ATmega88P__)
 368               	#  include <avr/iom88p.h>
 369               	#elif defined (__AVR_ATmega88PA__)
 370               	#  include <avr/iom88pa.h>
 371               	#elif defined (__AVR_ATmega88PB__)
 372               	#  include <avr/iom88pb.h>
 373               	#elif defined (__AVR_ATmega8515__)
 374               	#  include <avr/iom8515.h>
 375               	#elif defined (__AVR_ATmega8535__)
 376               	#  include <avr/iom8535.h>
 377               	#elif defined (__AVR_AT90S8535__)
 378               	#  include <avr/io8535.h>
 379               	#elif defined (__AVR_AT90C8534__)
 380               	#  include <avr/io8534.h>
 381               	#elif defined (__AVR_AT90S8515__)
 382               	#  include <avr/io8515.h>
 383               	#elif defined (__AVR_AT90S4434__)
 384               	#  include <avr/io4434.h>
 385               	#elif defined (__AVR_AT90S4433__)
 386               	#  include <avr/io4433.h>
 387               	#elif defined (__AVR_AT90S4414__)
 388               	#  include <avr/io4414.h>
 389               	#elif defined (__AVR_ATtiny22__)
 390               	#  include <avr/iotn22.h>
 391               	#elif defined (__AVR_ATtiny26__)
 392               	#  include <avr/iotn26.h>
 393               	#elif defined (__AVR_AT90S2343__)
 394               	#  include <avr/io2343.h>
 395               	#elif defined (__AVR_AT90S2333__)
 396               	#  include <avr/io2333.h>
 397               	#elif defined (__AVR_AT90S2323__)
 398               	#  include <avr/io2323.h>
 399               	#elif defined (__AVR_AT90S2313__)
 400               	#  include <avr/io2313.h>
 401               	#elif defined (__AVR_ATtiny4__)
 402               	#  include <avr/iotn4.h>
 403               	#elif defined (__AVR_ATtiny5__)
 404               	#  include <avr/iotn5.h>
 405               	#elif defined (__AVR_ATtiny9__)
 406               	#  include <avr/iotn9.h>
 407               	#elif defined (__AVR_ATtiny10__)
 408               	#  include <avr/iotn10.h>
 409               	#elif defined (__AVR_ATtiny20__)
 410               	#  include <avr/iotn20.h>
 411               	#elif defined (__AVR_ATtiny40__)
 412               	#  include <avr/iotn40.h>
 413               	#elif defined (__AVR_ATtiny2313__)
 414               	#  include <avr/iotn2313.h>
 415               	#elif defined (__AVR_ATtiny2313A__)
 416               	#  include <avr/iotn2313a.h>
 417               	#elif defined (__AVR_ATtiny13__)
 418               	#  include <avr/iotn13.h>
 419               	#elif defined (__AVR_ATtiny13A__)
 420               	#  include <avr/iotn13a.h>
 421               	#elif defined (__AVR_ATtiny25__)
 422               	#  include <avr/iotn25.h>
 423               	#elif defined (__AVR_ATtiny4313__)
 424               	#  include <avr/iotn4313.h>
 425               	#elif defined (__AVR_ATtiny45__)
 426               	#  include <avr/iotn45.h>
 427               	#elif defined (__AVR_ATtiny85__)
 428               	#  include <avr/iotn85.h>
 429               	#elif defined (__AVR_ATtiny24__)
 430               	#  include <avr/iotn24.h>
 431               	#elif defined (__AVR_ATtiny24A__)
 432               	#  include <avr/iotn24a.h>
 433               	#elif defined (__AVR_ATtiny44__)
 434               	#  include <avr/iotn44.h>
 435               	#elif defined (__AVR_ATtiny44A__)
 436               	#  include <avr/iotn44a.h>
 437               	#elif defined (__AVR_ATtiny441__)
 438               	#  include <avr/iotn441.h>
 439               	#elif defined (__AVR_ATtiny84__)
 440               	#  include <avr/iotn84.h>
 441               	#elif defined (__AVR_ATtiny84A__)
 442               	#  include <avr/iotn84a.h> 
 443               	#elif defined (__AVR_ATtiny841__)
 444               	#  include <avr/iotn841.h> 
 445               	#elif defined (__AVR_ATtiny261__)
 446               	#  include <avr/iotn261.h>
 447               	#elif defined (__AVR_ATtiny261A__)
 448               	#  include <avr/iotn261a.h>
 449               	#elif defined (__AVR_ATtiny461__)
 450               	#  include <avr/iotn461.h>
 451               	#elif defined (__AVR_ATtiny461A__)
 452               	#  include <avr/iotn461a.h>
 453               	#elif defined (__AVR_ATtiny861__)
 454               	#  include <avr/iotn861.h>
 455               	#elif defined (__AVR_ATtiny861A__)
 456               	#  include <avr/iotn861a.h>
 457               	#elif defined (__AVR_ATtiny43U__)
 458               	#  include <avr/iotn43u.h>
 459               	#elif defined (__AVR_ATtiny48__)
 460               	#  include <avr/iotn48.h>
 461               	#elif defined (__AVR_ATtiny88__)
 462               	#  include <avr/iotn88.h>
 463               	#elif defined (__AVR_ATtiny828__)
 464               	#  include <avr/iotn828.h>
 465               	#elif defined (__AVR_ATtiny87__)
 466               	#  include <avr/iotn87.h>
 467               	#elif defined (__AVR_ATtiny167__)
 468               	#  include <avr/iotn167.h>
 469               	#elif defined (__AVR_ATtiny1634__)
 470               	#  include <avr/iotn1634.h>
 471               	#elif defined (__AVR_AT90SCR100__)
 472               	#  include <avr/io90scr100.h>
 473               	#elif defined (__AVR_ATxmega8E5__)
 474               	#  include <avr/iox8e5.h>
 475               	#elif defined (__AVR_ATxmega16A4__)
 476               	#  include <avr/iox16a4.h>
 477               	#elif defined (__AVR_ATxmega16A4U__)
 478               	#  include <avr/iox16a4u.h>
 479               	#elif defined (__AVR_ATxmega16C4__)
 480               	#  include <avr/iox16c4.h>
 481               	#elif defined (__AVR_ATxmega16D4__)
 482               	#  include <avr/iox16d4.h>
 483               	#elif defined (__AVR_ATxmega16E5__)
 484               	#  include <avr/iox16e5.h>
 485               	#elif defined (__AVR_ATxmega32A4__)
 486               	#  include <avr/iox32a4.h>
 487               	#elif defined (__AVR_ATxmega32A4U__)
 488               	#  include <avr/iox32a4u.h>
 489               	#elif defined (__AVR_ATxmega32C3__)
 490               	#  include <avr/iox32c3.h>
 491               	#elif defined (__AVR_ATxmega32C4__)
 492               	#  include <avr/iox32c4.h>
 493               	#elif defined (__AVR_ATxmega32D3__)
 494               	#  include <avr/iox32d3.h>
 495               	#elif defined (__AVR_ATxmega32D4__)
 496               	#  include <avr/iox32d4.h>
 497               	#elif defined (__AVR_ATxmega32E5__)
 498               	#  include <avr/iox32e5.h>
 499               	#elif defined (__AVR_ATxmega64A1__)
 500               	#  include <avr/iox64a1.h>
 501               	#elif defined (__AVR_ATxmega64A1U__)
 502               	#  include <avr/iox64a1u.h>
 503               	#elif defined (__AVR_ATxmega64A3__)
 504               	#  include <avr/iox64a3.h>
 505               	#elif defined (__AVR_ATxmega64A3U__)
 506               	#  include <avr/iox64a3u.h>
 507               	#elif defined (__AVR_ATxmega64A4U__)
 508               	#  include <avr/iox64a4u.h>
 509               	#elif defined (__AVR_ATxmega64B1__)
 510               	#  include <avr/iox64b1.h>
 511               	#elif defined (__AVR_ATxmega64B3__)
 512               	#  include <avr/iox64b3.h>
 513               	#elif defined (__AVR_ATxmega64C3__)
 514               	#  include <avr/iox64c3.h>
 515               	#elif defined (__AVR_ATxmega64D3__)
 516               	#  include <avr/iox64d3.h>
 517               	#elif defined (__AVR_ATxmega64D4__)
 518               	#  include <avr/iox64d4.h>
 519               	#elif defined (__AVR_ATxmega128A1__)
 520               	#  include <avr/iox128a1.h>
 521               	#elif defined (__AVR_ATxmega128A1U__)
 522               	#  include <avr/iox128a1u.h>
 523               	#elif defined (__AVR_ATxmega128A4U__)
 524               	#  include <avr/iox128a4u.h>
 525               	#elif defined (__AVR_ATxmega128A3__)
 526               	#  include <avr/iox128a3.h>
 527               	#elif defined (__AVR_ATxmega128A3U__)
 528               	#  include <avr/iox128a3u.h>
 529               	#elif defined (__AVR_ATxmega128B1__)
 530               	#  include <avr/iox128b1.h>
 531               	#elif defined (__AVR_ATxmega128B3__)
 532               	#  include <avr/iox128b3.h>
 533               	#elif defined (__AVR_ATxmega128C3__)
 534               	#  include <avr/iox128c3.h>
 535               	#elif defined (__AVR_ATxmega128D3__)
 536               	#  include <avr/iox128d3.h>
 537               	#elif defined (__AVR_ATxmega128D4__)
 538               	#  include <avr/iox128d4.h>
 539               	#elif defined (__AVR_ATxmega192A3__)
 540               	#  include <avr/iox192a3.h>
 541               	#elif defined (__AVR_ATxmega192A3U__)
 542               	#  include <avr/iox192a3u.h>
 543               	#elif defined (__AVR_ATxmega192C3__)
 544               	#  include <avr/iox192c3.h>
 545               	#elif defined (__AVR_ATxmega192D3__)
 546               	#  include <avr/iox192d3.h>
 547               	#elif defined (__AVR_ATxmega256A3__)
 548               	#  include <avr/iox256a3.h>
 549               	#elif defined (__AVR_ATxmega256A3U__)
 550               	#  include <avr/iox256a3u.h>
 551               	#elif defined (__AVR_ATxmega256A3B__)
 552               	#  include <avr/iox256a3b.h>
 553               	#elif defined (__AVR_ATxmega256A3BU__)
 554               	#  include <avr/iox256a3bu.h>
 555               	#elif defined (__AVR_ATxmega256C3__)
 556               	#  include <avr/iox256c3.h>
 557               	#elif defined (__AVR_ATxmega256D3__)
 558               	#  include <avr/iox256d3.h>
 559               	#elif defined (__AVR_ATxmega384C3__)
 560               	#  include <avr/iox384c3.h>
 561               	#elif defined (__AVR_ATxmega384D3__)
 562               	#  include <avr/iox384d3.h>
 563               	#elif defined (__AVR_ATA5702M322__)
 564               	#  include <avr/ioa5702m322.h>
 565               	#elif defined (__AVR_ATA5782__)
 566               	#  include <avr/ioa5782.h>
 567               	#elif defined (__AVR_ATA5790__)
 568               	#  include <avr/ioa5790.h>
 569               	#elif defined (__AVR_ATA5790N__)
 570               	#  include <avr/ioa5790n.h>
 571               	#elif defined (__AVR_ATA5791__)
 572               	#  include <avr/ioa5791.h>
 573               	#elif defined (__AVR_ATA5831__)
 574               	#  include <avr/ioa5831.h>
 575               	#elif defined (__AVR_ATA5272__)
 576               	#  include <avr/ioa5272.h>
 577               	#elif defined (__AVR_ATA5505__)
 578               	#  include <avr/ioa5505.h>
 579               	#elif defined (__AVR_ATA5795__)
 580               	#  include <avr/ioa5795.h>
 581               	#elif defined (__AVR_ATA6285__)
 582               	#  include <avr/ioa6285.h>
 583               	#elif defined (__AVR_ATA6286__)
 584               	#  include <avr/ioa6286.h>
 585               	#elif defined (__AVR_ATA6289__)
 586               	#  include <avr/ioa6289.h>
 587               	#elif defined (__AVR_ATA6612C__)
 588               	#  include <avr/ioa6612c.h>
 589               	#elif defined (__AVR_ATA6613C__)
 590               	#  include <avr/ioa6613c.h>
 591               	#elif defined (__AVR_ATA6614Q__)
 592               	#  include <avr/ioa6614q.h>
 593               	#elif defined (__AVR_ATA6616C__)
 594               	#  include <avr/ioa6616c.h>
 595               	#elif defined (__AVR_ATA6617C__)
 596               	#  include <avr/ioa6617c.h>
 597               	#elif defined (__AVR_ATA664251__)
 598               	#  include <avr/ioa664251.h>
 599               	#elif defined (__AVR_ATA8210__)
 600               	#  include <avr/ioa8210.h>
 601               	#elif defined (__AVR_ATA8510__)
 602               	#  include <avr/ioa8510.h>
 603               	/* avr1: the following only supported for assembler programs */
 604               	#elif defined (__AVR_ATtiny28__)
 605               	#  include <avr/iotn28.h>
 606               	#elif defined (__AVR_AT90S1200__)
 607               	#  include <avr/io1200.h>
 608               	#elif defined (__AVR_ATtiny15__)
 609               	#  include <avr/iotn15.h>
 610               	#elif defined (__AVR_ATtiny12__)
 611               	#  include <avr/iotn12.h>
 612               	#elif defined (__AVR_ATtiny11__)
 613               	#  include <avr/iotn11.h>
 614               	#elif defined (__AVR_M3000__)
 615               	#  include <avr/iom3000.h>
 616               	#elif defined (__AVR_DEV_LIB_NAME__)
 617               	#  define __concat__(a,b) a##b
 618               	#  define __header1__(a,b) __concat__(a,b)
 619               	#  define __AVR_DEVICE_HEADER__ <avr/__header1__(io,__AVR_DEV_LIB_NAME__).h>
 620               	#  include __AVR_DEVICE_HEADER__
 621               	#else
 622               	#  if !defined(__COMPILING_AVR_LIBC__)
 623               	#    warning "device type not defined"
 624               	#  endif
 625               	#endif
 626               	
 627               	#include <avr/portpins.h>
   1               	/* Copyright (c) 2003  Theodore A. Roth
 628               	
 629               	#include <avr/common.h>
   1               	/* Copyright (c) 2007 Eric B. Weddington
 630               	
 631               	#include <avr/version.h>
   1               	/* Copyright (c) 2005, Joerg Wunsch                               -*- c -*-
 632               	
 633               	#if __AVR_ARCH__ >= 100
 634               	#  include <avr/xmega.h>
 635               	#endif
 636               	
 637               	/* Include fuse.h after individual IO header files. */
 638               	#include <avr/fuse.h>
   1               	/* Copyright (c) 2007, Atmel Corporation
 639               	
 640               	/* Include lock.h after individual IO header files. */
 641               	#include <avr/lock.h>
   1               	/* Copyright (c) 2007, Atmel Corporation
 642               	
  31               	
  32               	/*
  33               	just dont compile by sdt
  34               	;----------------------------------------------------------------------
  35               	#include <avr/eeprom.h>
  36               	;----------------------------------------------------------------------
  37               	#include <avr/wdt.h>
  38               	*/
  39               	
  40               	;----------------------------------------------------------------------
  41               	;
  42               	; 02/12/2020
  43               	;
  44               	; Alvaro Gomes Sobral Barcellos
  45               	;
  46               	; u2forth
  47               	;
  48               	
  90               	    .LIST
  91               	
  92               	;----------------------------------------------------------------------
  93               	#include "equates.inc" 
   1               	
   2               	;----------------------------------------------------------------------
   3               	;
   4               	; init instruction pointer and etc
   5               	; from avr manual
   6               	;
   7               	    __SREG__ = 0x3f
   8               	    __SP_H__ = 0x3e
   9               	    __SP_L__ = 0x3d
  10               	
  11               	;----------------------------------------------------------------------;
  12               	; assign stacks address for atmega8
  13               	;
  14               	    SRAM_END = 0x45F	; SRAM from AVR manual
  15               	    SRAM_START = 0x060 	; SRAM from AVR manual
  16               	    USER_START = 0x0C0	; still to be fixed at endings
  17               	
  18               	;----------------------------------------------------------------------
  19               	; stacks and buffers
  20               	;
  21               	    SPU_SIZE = 40 ; real Stack Pointer, reserved for interrupts and libraries
  22               	
  23               	;----------------------------------------------------------------------
  24               	; default sizes as forth83 (bytes)
  25               	;
  26               	    PSP_SIZE = 64 ; minimum 32 words
  27               	    RSP_SIZE = 48 ; minimum 24 words
  28               	    TIB_SIZE = 80 ; minimum 80 bytes
  29               	    PAD_SIZE = 84 ; minumum 84 bytes
  30               	
  31               	;----------------------------------------------------------------------
  32               	; grows downwards SP = SP - 1
  33               	;
  34               	    SPP_TOP = SRAM_END 
  35               	    RSP_TOP = SPP_TOP - SPU_SIZE
  36               	    PSP_TOP = RSP_TOP - RSP_SIZE
  37               		PSP_END = PSP_TOP - PSP_SIZE
  38               	
  39               	;----------------------------------------------------------------------
  40               	; grows upwards PT = PT + 1
  41               	;
  42               	    TIB_TOP = PSP_END - TIB_SIZE
  43               	
  44               	;----------------------------------------------------------------------
  45               	; grows upwards PT = PT + 1
  46               	;
  47               	    PAD_TOP = TIB_TOP - PAD_SIZE
  48               	
  49               	;----------------------------------------------------------------------
  50               	; flags for words
  51               	;
  52               	    F_IMMEDIATE = 0x080
  53               	    F_COMPILE = 0x040
  54               	    F_HIDDEN = 0x020
  55               	
  56               	    F_MASKZ = 0x01F
  57               	    F_MASKO = 0x0E0
  58               	
  59               	;---------------------------------------------------------------------
  60               	; default base
  61               	;
  62               	    BASEE = 16
  63               	
  64               	;---------------------------------------------------------------------
  65               	; default cell size
  66               	;
  67               	    CELL_SIZE = 2
  68               	
  69               	;---------------------------------------------------------------------
  70               	; default init cell, in dictionary ????
  71               	;
  72               	    _INIT = 200
  73               	
  94               	
  95               	;----------------------------------------------------------------------
  96               	#include "macros.inc"
   1               	;----------------------------------------------------------------------
   2               	;
   3               	;    MUST use gnu cpp 
   4               	;    use with .S (upper S) or
   5               	;    use with -x assembler-with-cpp
   6               	;
   7               	;----------------------------------------------------------------------
   8               	; generic use
   9               	#define    _work_    r0    
  10               	; .set _work_ , r0    
  11               	
  12               	; always zero
  13               	#define    _zero_    r1    
  14               	; .set _zero_ , r1
  15               	
  16               	; Z instruction pointer for access sram and flash high memory
  17               	#define    ip_low    r30    
  18               	;.set    ipl,    r30
  19               	
  20               	; Z instruction pointer for access sram and flash high memory
  21               	#define    ip_high    r31    
  22               	;.set    iph,    r31
  23               	
  24               	; Y return stack pointer for access sram
  25               	#define    rsp_low    r28    
  26               	;.set    rspl,    r28
  27               	
  28               	; Y return stack pointer for access sram
  29               	#define    rsp_high    r29    
  30               	;.set    rsph,    r29
  31               	
  32               	; X parameter stack pointer for access sram
  33               	#define    psp_low    r26    
  34               	;.set    pspl,    r26
  35               	
  36               	; X parameter stack pointer for access sram
  37               	#define    psp_high    r27    
  38               	;.set    psph,    r27
  39               	
  40               	; work registers
  41               	#define    wrk_low    r24    
  42               	;.set    wl,    r24
  43               	
  44               	; work registers
  45               	#define    wrk_high    r25    
  46               	;.set    wh,    r25
  47               	
  48               	; second value parameter stack
  49               	#define    nds_low    r22    
  50               	;.set    nl,    r22
  51               	
  52               	; second value parameter stack
  53               	#define    nds_high    r23    
  54               	;.set    nh, r23
  55               	
  56               	; fist value parameter stack
  57               	#define    tos_low    r20    
  58               	;.set    tl,    r20
  59               	
  60               	; fist value parameter stack
  61               	#define    tos_high    r21    
  62               	;.set    th,    r21
  63               	
  64               	;----------------------------------------------------------------------
  65               	;
  66               	; version information
  67               	;----------------------------------------------------------------------
  68               	;
  69               	; version information
  70               	;
  71               	.equ version, 0x0100
  72               	
  73               	;----------------------------------------------------------------------
  74               	;
  75               	; start reverse linked list
  76               	;
  77               	.set _LINK , 0x0
  78               	.set _THIS , 0x0
  79               	
  80               	;----------------------------------------------------------------------
  81               	;
  82               	; idents for first opcode in macros
  83               	;
  84               	.equ isNOOP, 0
  85               	.equ isLEAF, 1
  86               	.equ isTWIG, 2
  87               	
  88               	;----------------------------------------------------------------------
  89               	;
  90               	; header of word in dictionary
  91               	; opcode for CORE ( execute a opcode )
  92               	; must end with CORE :)
  93               	;
  94               	.macro LEAF size , name
  95               	.set _THIS, .
  96               	.word _LINK
  97               	.set _LINK, _THIS 
  98               	.byte \size
  99               	.ascii "\name"
 100               	;was odd, so we need to pad it
 101               	.if ! ( \size & 1 ) 
 102               	.byte 0
 103               	.endif
 104               	.byte isLEAF
 105               	.balign 2
 106               	.endm
 107               	
 108               	;----------------------------------------------------------------------
 109               	;
 110               	; header of word in dictionary
 111               	; opcode for TWIG ( as colon )
 112               	; must end with EXIT :)
 113               	;
 114               	.macro TWIG size , name
 115               	.set _THIS, .
 116               	.word _LINK
 117               	.set _LINK, _THIS 
 118               	.byte \size
 119               	.ascii "\name"
 120               	;was odd, so we need to pad it
 121               	.if ! ( \size & 1 ) 
 122               	.byte 0
 123               	.endif
 124               	.byte isTWIG
 125               	.balign 2
 126               	.endm
 127               	
 128               	;----------------------------------------------------------------------
 129               	.macro rspush low , high
 130               	    st -Y , \low
 131               	    st -Y , \high
 132               	.endm
 133               	
 134               	;----------------------------------------------------------------------
 135               	.macro rspull low , high
 136               	    ld \high , Y+
 137               	    ld \low , Y+
 138               	.endm
 139               	
 140               	;----------------------------------------------------------------------
 141               	.macro pspush low , high
 142               	    st -X , \low
 143               	    st -X , \high
 144               	.endm
 145               	
 146               	;----------------------------------------------------------------------
 147               	.macro pspull low , high
 148               	    ld \high , X+
 149               	    ld \low , X+
 150               	.endm
 151               	
 152               	;----------------------------------------------------------------------
 153               	; also io@
 154               	.macro peek byte , address
 155               	    .if (\address < $40)
 156               	    in \byte , \address
 157               	    .else
 158               	    lds \byte , \address
 159               	    .endif
 160               	.endm
 161               	
 162               	;----------------------------------------------------------------------
 163               	; also io!
 164               	.macro poke byte , address
 165               	    .if (\address < $40)
 166               	    out \byte , \address
 167               	    .else
 168               	    sts \byte , \address
 169               	    .endif
 170               	.endm
 171               	
 172               	;----------------------------------------------------------------------
 173               	.macro next_wrk
 174               		lpm wrk_low, Z+
 175               		lpm wrk_high, Z+
 176               	.endm
 177               	
 178               	;----------------------------------------------------------------------
 179               	.macro pull_wrk
 180               	 	movw wrk_low, tos_low
 181               	 	movw tos_low, nds_low
 182               	 	pspull nds_low, nds_high
 183               	.endm
 184               	
 185               	;----------------------------------------------------------------------
 186               	.macro push_wrk
 187               		pspush nds_low, nds_high
 188               		movw nds_low, tos_low
 189               	 	movw tos_low, wrk_low
 190               	.endm
 191               	
  97               	
  98               	;----------------------------------------------------------------------
  99               	#include "boot.inc"
   1               	;----------------------------------------------------------------------
   2               	;
   3               	; code segment, flash
   4               	;
   5               	.section .text
   6               	; .org 0x00000
   7               	.global main
   8               	main:
   9               	
  10               	;----------------------------------------------------------------------
  11               	;
  12               	; interrup vector table
  13               	;
  14               	;----------------------------------------------------------------------
  15               	
  16 0000 00C0      	    rjmp RESET ; Reset Handler
  17 0002 1895      	    reti ; rjmp EXT_INT0 ; IRQ0 Handler
  18 0004 1895      	    reti ; rjmp EXT_INT1 ; IRQ1 Handler
  19 0006 1895      	    reti ; rjmp TIM2_COMP ; Timer2 Compare Handler
  20 0008 1895      	    reti ; rjmp TIM2_OVF ; Timer2 Overflow Handler
  21 000a 1895      	    reti ; rjmp TIM1_CAPT ; Timer1 Capture Handler
  22 000c 1895      	    reti ; rjmp TIM1_COMPA ; Timer1 CompareA Handler
  23 000e 1895      	    reti ; rjmp TIM1_COMPB ; Timer1 CompareB Handler
  24 0010 1895      	    reti ; rjmp TIM1_OVF ; Timer1 Overflow Handler
  25 0012 00C0      	    rjmp TIM0_OVF ; Timer0 Overflow Handler
  26 0014 1895      	    reti ; rjmp SPI_STC ; SPI Transfer Complete Handler
  27 0016 1895      	    reti ; rjmp USART_RXC ; USART RX Complete Handler
  28 0018 1895      	    reti ; rjmp USART_UDRE ; ((0x0C) + 0x20) Empty Handler
  29 001a 1895      	    reti ; rjmp USART_TXC ; USART TX Complete Handler
  30 001c 1895      	    reti ; rjmp ADC ; ADC Conversion Complete Handler
  31 001e 1895      	    reti ; rjmp EE_RDY ; EEPROM Ready Handler
  32 0020 1895      	    reti ; rjmp ANA_COMP ; Analog Comparator Handler
  33 0022 1895      	    reti ; rjmp TWSI ; Two-wire Serial Interface Handler
  34 0024 1895      	    reti ; rjmp SPM_RDY ; Store Program Memory Ready Handler;
  35               	
  36               	;----------------------------------------------------------------------
  37               	;
  38               	;    timer0 prescale using 64,  default for 8 MHz
  39               	;
  40               	;   miliseconds
  41               	;
  42               	;    count as 61, about 1008,07 Hz
  43               	;    count as 62, about  992,07 Hz, 
  44               	;
  45               	;    counter cotinues while inside ? 
  46               	;   without these instructions ?
  47               	;
  48               	TIM0_OVF:
  49               	;    save flags and stop interrups
  50 0026 5FB6      	    in R5, __SREG__
  51 0028 F894      	    cli
  52               	;    reset watch dog
  53 002a A895      	    wdr
  54               	;    get counter
  55 002c 3090 0000 	    lds R3, TIMER
  56 0030 2090 0000 	    lds R2, TIMER+1
  57               	;    increase counter
  58 0034 4424      	    eor    R4, R4
  59 0036 4394      	    inc R4
  60 0038 240C      	    add R2, R4
  61 003a 4A94      	    dec R4
  62 003c 241C      	    adc R2, R4
  63               	;    put counter
  64 003e 3092 0000 	    sts TIMER, R3
  65 0042 2092 0000 	    sts TIMER+1, R2
  66               	;    adjusts counter
  67               	;    out TCNT0H, R2
  68               	;    out TCNT0L, R3
  69               	
  70               	;    load flags and return
  71 0046 5FBE      	    out __SREG__, R5
  72 0048 7894      	    sei
  73 004a 1895      	    reti
  74               	
  75               	;----------------------------------------------------------------------
  76               	; watch dog
  77               	;    WDTCSR = bit (WDIE) | bit (WDP2) | bit (WDP1);    // set WDIE, and 1 second delay
  78               	;
  79               	#define WDIE    6
  80               	#define WDP2    2
  81               	#define WDP1    1
  82               	#define WDE     3
  83               	#define WDCE    4
  84               	
  85               	; reset WDT
  86 004c A895      	    wdr
  87               	;
  88               	;  define watch dog counter
  89               	;    ??? code
  90               	;
  91               	; write logical one to WDCE and WDE
  92               	;    in wrk_low, WDTCR
  93               	;    ori wrk_low, (1<<WDCE)|(1<<WDE)
  94               	;    out WDTCR, wrk_low    
  95               	; turn off wd
  96               	;    ldi wrk_low, (0<<WDE)
  97               	;    out WDTRC, wrk_low
  98               	; set WDIE, and 1 second delay
  99               	;    ori wrk_low, (1<<WDIE)|(1<<WDP2)|(1<<WDP1)
 100               	;    out WDTCR, wrk_low
 101               	
 102               	; Enable interrupts
 103 004e 7894      	    sei
 104               	
 105               	;----------------------------------------------------------------------
 106               	; 
 107               	RESET:
 108               	; clear interrupts
 109 0050 F894      	    cli
 110               	; init _zero_as zero
 111 0052 1124      	    eor _zero_, _zero_; exclusive or, xor
 112 0054 1FBE      	    out __SREG__, _zero_; clear sreg
 113               	; init real sp at end of sram
 114 0056 94E0      	    ldi wrk_high, hi8(SPP_TOP)
 115 0058 9EBF      	    out __SP_H__, wrk_high
 116 005a 8FE5      	    ldi wrk_low, lo8(SPP_TOP)
 117 005c 8DBF      	    out __SP_L__, wrk_low
 118               	; eneble interrupts
 119 005e 7894      	    sei
 120 0060 00C0      	    rjmp BYE
 121               	
 100               	
 101               	;----------------------------------------------------------------------
 102               	; start forth,
 103               	;
 104               	;----------------------------------------------------------------------
 105               	; start of dictionary
 106               	;
 107               	;----------------------------------------------------------------------
 108               	
 109               	;----------------------------------------------------------------------
 110               	; init instruction pointer and etc
 111               	;
 112 0062 0000 0342 	LEAF 3, "BYE"
 112      5945 0100 
 113               	BYE:
 114 006a 0024      	    eor _work_, _work_
 115 006c 1124      	    eor _zero_, _zero_
 116 006e 5527      	    eor tos_high, tos_high
 117 0070 4427      	    eor tos_low, tos_low
 118 0072 7727      	    eor nds_high, nds_high
 119 0074 6627      	    eor nds_low, nds_low
 120 0076 9927      	    eor wrk_high, wrk_high
 121 0078 8827      	    eor wrk_low, wrk_low
 122 007a F0E0      	    ldi zh, hi8(_INIT)
 123 007c E8EC      	    ldi zl, lo8(_INIT)
 124 007e 00C0      		rjmp ABORT
 125               	
 126               	;----------------------------------------------------------------------
 127               	;
 128               	; init return stack
 129               	;
 130 0080 0000 0541 	LEAF 5, "ABORT"
 130      424F 5254 
 130      0100 
 131               	ABORT:
 132               	; init return stack
 133 008a D4E0      	    ldi rsp_high, hi8(RSP_TOP)
 134 008c C7E3      	    ldi rsp_low, lo8(RSP_TOP)
 135 008e 00C0      		rjmp QUIT
 136               	
 137               	;----------------------------------------------------------------------
 138               	;
 139               	; init parameter stack
 140               	;
 141 0090 0000 0451 	LEAF 4, "QUIT"
 141      5549 5400 
 141      0100 
 142               	QUIT:
 143               	; init parameter stack
 144 009a B4E0      	    ldi psp_high, hi8(PSP_TOP)
 145 009c A7E0      	    ldi psp_low, lo8(PSP_TOP)
 146 009e 00C0      		rjmp NOOP
 147               	
 148               	;----------------------------------------------------------------------
 149               	;
 150               	; init registers 
 151               	;
 152               	
 153               	;----------------------------------------------------------------------
 154               	; ok push a value from flash into parameter stack
 155               	;
 156 00a0 0000 044E 	LEAF 4, "NOOP"
 156      4F4F 5000 
 156      0100 
 157               	NOOP:
 158 00aa 00C0      	    rjmp CORE
 159               	
 160               	;----------------------------------------------------------------------
 161               	#include "uart.inc"
   1               	
   2               	;----------------------------------------------------------------------
   3               	;
   4               	; ok init usart, from avr-gcc public code, io ports as constants
   5               	;
   6               	;    defaults to 9600, 8N1, no control
   7               	;
   8 00ac 0000 0349 	LEAF 3, "IO!"
   8      4F21 0100 
   9               	IOYO:
  10 00b4 8827      	    eor wrk_low, wrk_low
  11 00b6 80BD      	    out 0x20, wrk_low
  12 00b8 84E3      	    ldi wrk_low,lo8(52)
  13 00ba 89B9      	    out 0x9,wrk_low
  14 00bc 8AB1      	    in wrk_low,0xa
  15 00be 8861      	    ori wrk_low,lo8(24)
  16 00c0 8AB9      	    out 0xa,wrk_low
  17 00c2 8EE8      	    ldi wrk_low,lo8(-114)
  18 00c4 80BD      	    out 0x20,wrk_low
  19 00c6 80B5      	    in wrk_low,0x20
  20 00c8 8064      	    ori wrk_low,lo8(64)
  21 00ca 80BD      	    out 0x20,wrk_low
  22 00cc 00C0      	    rjmp CORE
  23               	
  24               	;----------------------------------------------------------------------
  25               	;
  26               	; ok non block, test if can receive a char ( -- 0x00 | ch 0xFF )
  27               	;
  28 00ce 0000 044B 	LEAF 4, "KEY?"
  28      4559 3F00 
  28      0100 
  29               	KEYQM:
  30               	RXAT:
  31 00d8 5F9B      	    sbis 0xb, 7
  32 00da 00C0      	    rjmp FFALSE
  33 00dc 8CB1      	    in wrk_low, 0xc
  34 00de 6E93 7E93 	    pspush nds_low, nds_high
  35 00e2 BA01      	    movw nds_low, tos_low
  36 00e4 00C0      	    rjmp FTRUE
  37               	
  38               	;----------------------------------------------------------------------
  39               	;
  40               	; ok non block, test if can send a char ( ch -- ch 0x00 | 0xFF )
  41               	;
  42 00e6 0000 0545 	LEAF 5, "EMIT?"
  42      4D49 543F 
  42      0100 
  43               	EMITQM:
  44               	TXTO:
  45 00f0 5D9B      	    sbis 0xb, 5
  46 00f2 00C0      	    rjmp FFALSE
  47 00f4 4CB9      	    out 0xc, tos_low
  48 00f6 CB01      	    movw wrk_low, nds_low
  49 00f8 7D91 6D91 	    pspull nds_low, nds_high
  50 00fc 00C0      	    rjmp FTRUE
  51               	
 162               	
 163               	;----------------------------------------------------------------------
 164               	; ok push a value from flash into parameter stack
 165               	;
 166 00fe 0000 0764 	LEAF 7, "doLIT"
 166      6F4C 4954 
 166      0100 
 167               	DOLIT:
 168 0108 6E93 7E93 	    pspush nds_low, nds_high
 169 010c BA01      	    movw nds_low, tos_low
 170 010e 8591 9591 	    next_wrk
 171 0112 00C0      	    rjmp CORE
 172               	
 173               	;----------------------------------------------------------------------
 174               	; get address of a variable ????
 175               	;
 176 0114 0000 0464 	LEAF 4, "doVAR"
 176      6F56 4152 
 176      0001 
 177               	DOVAR:
 178               	    ; zzz ?
 179 011e 00C0      	    rjmp CORE
 180               	
 181               	;----------------------------------------------------------------------
 182               	; get address of a constant ????
 183               	;
 184 0120 0000 0464 	LEAF 4, "doCON"
 184      6F43 4F4E 
 184      0001 
 185               	DOCON:
 186               	    ; zzz ?
 187 012a 00C0      	    rjmp CORE
 188               	
 189               	;----------------------------------------------------------------------
 190               	;
 191               	; ok if 0 branch ( a -- F | T )
 192               	;
 193 012c 0000 073F 	LEAF 7, "?BRANCH"
 193      4252 414E 
 193      4348 0100 
 194               	QMBRANCH:
 195 0138 CA01 AB01 		pull_wrk
 195      7D91 6D91 
 196 0140 0197      	    sbiw wrk_low, 1
 197 0142 01F0      	    breq BRANCH
 198 0144 00C0      	    rjmp CORE
 199               	
 200               	;----------------------------------------------------------------------
 201               	; ok branch
 202 0146 0000 0642 	LEAF 6, "BRANCH"
 202      5241 4E43 
 202      4800 0100 
 203               	BRANCH:
 204 0152 8591 9591 	    next_wrk
 205 0156 00C0      	    rjmp GOES
 206               	
 207               	;----------------------------------------------------------------------
 208               	; ok exec pull new ip from parameter stack
 209               	;
 210 0158 0000 0445 	LEAF 4, "EXEC"
 210      5845 4300 
 210      0100 
 211               	EXEC:
 212 0162 CA01 AB01 	    pull_wrk
 212      7D91 6D91 
 213 016a 00C0      	    rjmp GOES
 214               	
 215               	;----------------------------------------------------------------------
 216               	; ok exit pull new ip from return stack
 217               	;
 218 016c 0000 0445 	LEAF 4, "EXIT"
 218      5849 5400 
 218      0100 
 219               	EXIT:
 220 0176 F991 E991 	    rspull zl, zh
 221 017a 00C0      	    rjmp ENTER 
 222               	
 223               	;----------------------------------------------------------------------
 224               	; ok enter, push next ip into return stack
 225               	;
 226 017c 0000 0545 	LEAF 5, "ENTER"
 226      4E54 4552 
 226      0100 
 227               	ENTER:
 228 0186 8591 9591 	    next_wrk
 229 018a EA93 FA93 	    rspush zl, zh
 230               	GOES:
 231 018e 0197      	    sbiw wrk_low, 1 ; point to opcode.
 232 0190 FC01      	    movw zl, wrk_low
 233 0192 00C0      	    rjmp CORE
 234               	
 235               	;---------------------------------------------------------------------
 236               	;
 237               	; read a opcode in [ip]
 238               	;
 239 0194 0000 0443 	LEAF 4, "CORE"
 239      4F52 4500 
 239      0100 
 240               	CORE:
 241               	
 242               	; next instruction
 243               	
 244 019e 0590      	    lpm r0, Z+
 245               	
 246               	; try  0, 1, 2, 3
 247               	
 248               	; equal to 0 NOOP
 249 01a0 0A94      	    dec r0    
 250 01a2 04F0      	    brlt CORE    
 251               	; equal to 1  
 252 01a4 0A94      	    dec r0
 253 01a6 04F0      	    brlt CORE    
 254               	; equal to 2 
 255 01a8 0A94      	    dec r0
 256 01aa 04F0      	    brlt ENTER    
 257               	; equal to 3 
 258 01ac 0A94      	    dec r0
 259 01ae 01F0      	    breq EXIT    
 260               	; greather then 3
 261 01b0 00C0      	    rjmp _CORE  
 262               	
 263               	
 264               	;----------------------------------------------------------------------
 265               	; ?? ok +! to
 266 01b2 0000 022B 	LEAF 2, "+!"
 266      2100 0100 
 267               	PLUSTO:
 268 01ba AA93 BA93 	    rspush xl, xh
 269 01be DA01      	    movw xl, tos_low
 270 01c0 9D91      	    ld wrk_high, X+
 271 01c2 8D91      	    ld wrk_low, X+
 272 01c4 860F      	    add wrk_low, nds_low
 273 01c6 971F      	    adc wrk_high, nds_high
 274 01c8 8E93      	    st -X, wrk_low
 275 01ca 9E93      	    st -X, wrk_high
 276 01cc B991 A991 	    rspull xl, xh
 277 01d0 00C0      	    rjmp TWODROP
 278               	
 279               	;----------------------------------------------------------------------
 280               	; ok ! to (works only in sram)
 281 01d2 0000 0121 	LEAF 1, "!"
 281      0100 
 282               	TO:
 283 01d8 CF01      	    movw wrk_low, ip_low
 284 01da FA01      		movw ip_low, tos_low
 285 01dc 7193      	    st Z+, nds_high
 286 01de 6193      	    st Z+, nds_low
 287               	_TO1:
 288 01e0 FC01      	    movw ip_low, wrk_low
 289 01e2 00C0      	    rjmp TWODROP
 290               	
 291               	;----------------------------------------------------------------------
 292               	; ok C!
 293 01e4 0000 0143 	LEAF 1, "C!"
 293      2101 
 294               	CTO:
 295 01ea CF01      	    movw wrk_low, ip_low
 296 01ec FA01      		movw ip_low, tos_low
 297 01ee 7193      	    st Z+, nds_high
 298 01f0 00C0      	    rjmp _TO1
 299               	
 300               	;----------------------------------------------------------------------
 301               	; ok @ at (works only in sram)
 302 01f2 0000 0140 	LEAF 1, "@"
 302      0100 
 303               	AT:
 304 01f8 CF01      	    movw wrk_low, ip_low
 305 01fa FA01      		movw ip_low, tos_low
 306 01fc 5191      	    ld tos_high, z+
 307 01fe 4191      	    ld tos_low, z+
 308               	_AT1:
 309 0200 FC01      	    movw ip_low, wrk_low
 310 0202 00C0      	    rjmp CORE
 311               	
 312               	;----------------------------------------------------------------------
 313               	; ok C@ cat
 314 0204 0000 0143 	LEAF 1, "C@"
 314      4001 
 315               	CAT:
 316 020a CF01      	    movw wrk_low, ip_low
 317 020c FA01      		movw ip_low, tos_low
 318 020e 5191      	    ld tos_high, z+
 319 0210 5527      	    eor tos_high, tos_high
 320 0212 00C0      	    rjmp _AT1
 321               	
 322               	
 323               	;----------------------------------------------------------------------
 324               	#include "stacks.inc"
   1               	;----------------------------------------------------------------------
   2               	; ok R@
   3 0214 0000 0252 	LEAF 2, "R@"
   3      4000 0100 
   4               	RAT:
   5 021c 6E93 7E93 	    pspush nds_low, nds_high
   6 0220 BA01      	    movw nds_low, tos_low
   7 0222 5991 4991 	    rspull tos_low, tos_high
   8               	    ; sbiw rsp_low, 1    zzz
   9 0226 00C0      	    rjmp CORE
  10               	
  11               	;----------------------------------------------------------------------
  12               	; ok R>
  13 0228 0000 0252 	LEAF 2, "R>"
  13      3E00 0100 
  14               	RGT:
  15 0230 6E93 7E93 	    pspush nds_low, nds_high
  16 0234 BA01      	    movw nds_low, tos_low
  17 0236 5991 4991 	    rspull tos_low, tos_high
  18 023a 00C0      	    rjmp CORE
  19               	
  20               	;----------------------------------------------------------------------
  21               	; ok >R
  22 023c 0000 023E 	LEAF 2, ">R"
  22      5200 0100 
  23               	GTR:
  24 0244 4A93 5A93 	    rspush tos_low, tos_high
  25 0248 00C0      	    rjmp DROP
  26               	
  27               	;----------------------------------------------------------------------
  28               	; ok RS@
  29 024a 0000 0352 	LEAF 3, "RS@"
  29      5340 0100 
  30               	RSAT:
  31 0252 CE01      	    movw wrk_low, rsp_low
  32 0254 00C0      	    rjmp PUSHS
  33               	
  34               	;----------------------------------------------------------------------
  35               	; ok RS!
  36 0256 0000 0352 	LEAF 3, "RS!"
  36      5321 0100 
  37               	RSTO:
  38 025e EA01      	    movw rsp_low, tos_low
  39 0260 00C0      	    rjmp DROP
  40               	
  41               	;----------------------------------------------------------------------
  42               	; PS@
  43 0262 0000 0450 	LEAF 4, "PS@"
  43      5340 0001 
  44               	PSAT:
  45 026a CD01      	    movw wrk_low, psp_low
  46 026c 00C0      	    rjmp PUSHS
  47               	
  48               	;----------------------------------------------------------------------
  49               	; PS!
  50 026e 0000 0450 	LEAF 4, "PS!"
  50      5321 0001 
  51               	PSTO:
  52 0276 DA01      	    movw psp_low, tos_low
  53 0278 00C0      	    rjmp CORE
  54               	
  55               	;----------------------------------------------------------------------
  56               	; ok ?DUP (a -- 0 | a a)
  57 027a 0000 033F 	LEAF 3, "?DUP"
  57      4455 5001 
  58               	QMDUP:
  59 0282 042E      	    mov _work_, tos_low
  60 0284 052A      	    or _work_, tos_high
  61 0286 01F0      	    breq _QMDUP1
  62 0288 00C0      	    rjmp DUP
  63               	_QMDUP1:
  64 028a 00C0      	    rjmp CORE
  65               	
  66               	;----------------------------------------------------------------------
  67               	; ok DUP (a -- a a)
  68 028c 0000 0344 	LEAF 3, "DUP"
  68      5550 0100 
  69               	DUP:
  70 0294 6E93 7E93 	    pspush nds_low, nds_high
  71 0298 BA01      	    movw nds_low, tos_low
  72 029a 00C0      	    rjmp CORE
  73               	
  74               	;----------------------------------------------------------------------
  75               	; ok SWAP (a b -- b a)
  76 029c 0000 0453 	LEAF 4, "SWAP"
  76      5741 5000 
  76      0100 
  77               	SWAP:
  78 02a6 CB01      	    movw wrk_low, nds_low
  79 02a8 BA01      	    movw nds_low, tos_low
  80 02aa AC01      	    movw tos_low, wrk_low
  81 02ac 00C0      	    rjmp CORE
  82               	 
  83               	;----------------------------------------------------------------------
  84               	;
  85               	; ok DROP (a b -- a)
  86               	;
  87 02ae 0000 0444 	LEAF 4, "DROP"
  87      524F 5000 
  87      0100 
  88               	DROP:
  89 02b8 AB01      	    movw tos_low, nds_low
  90 02ba 7D91 6D91 	    pspull nds_low, nds_high
  91 02be 00C0      	    rjmp CORE
  92               	
  93               	;----------------------------------------------------------------------
  94               	;
  95               	; ok (a b c -- a b c w)
  96               	; push a value or a flag, to tos
  97               	;
  98 02c0 0000 0550 	LEAF 5, "PUSHS"
  98      5553 4853 
  98      0100 
  99               	PUSHS:
 100 02ca 6E93 7E93 	    pspush nds_low, nds_high
 101 02ce BA01      	    movw nds_low, tos_low
 102 02d0 AC01      	    movw tos_low, wrk_low
 103 02d2 00C0      	    rjmp CORE
 104               	
 105               	;----------------------------------------------------------------------
 106               	; ok ROT (a b c -- b c a)
 107               	;
 108 02d4 0000 0352 	LEAF 3, "ROT"
 108      4F54 0100 
 109               	ROT:
 110 02dc 9D91 8D91 	    pspull wrk_low, wrk_high
 111 02e0 00C0      	    rjmp PUSHS
 112               	
 113               	;----------------------------------------------------------------------
 114               	; ok OVER (a b -- a b a)
 115               	;
 116 02e2 0000 044F 	LEAF 4, "OVER"
 116      5645 5200 
 116      0100 
 117               	OVER:
 118 02ec CB01      	    movw wrk_low, nds_low
 119 02ee 00C0      	    rjmp PUSHS
 120               	
 121               	;----------------------------------------------------------------------
 122               	;
 123               	; ok push a false 0x0000
 124               	;
 125 02f0 0000 0546 	LEAF 5, "FALSE"
 125      414C 5345 
 125      0100 
 126               	ZERO:
 127               	FFALSE:
 128 02fa 8827      	    clr wrk_low
 129 02fc 9927      	    clr wrk_high
 130 02fe 00C0      	    rjmp PUSHS
 131               	
 132               	;----------------------------------------------------------------------
 133               	;
 134               	; ok push a true 0xFFFF
 135               	;
 136 0300 0000 0454 	LEAF 4, "TRUE"
 136      5255 4500 
 136      0100 
 137               	ONENEG:
 138               	FTRUE:
 139 030a 8FEF      	    ser wrk_low
 140 030c 9FEF      	    ser wrk_high
 141 030e 00C0      	    rjmp PUSHS
 142               	
 143               	;----------------------------------------------------------------------
 144               	; ok 2drop
 145 0310 0000 0532 	LEAF 5, "2DROP"
 145      4452 4F50 
 145      0100 
 146               	TWODROP:
 147 031a 5D91 4D91 	    pspull tos_low, tos_high
 148 031e 7D91 6D91 	    pspull nds_low, nds_high
 149 0322 00C0      	    rjmp CORE
 150               	
 151               	;----------------------------------------------------------------------
 152               	; ok 2dup
 153 0324 0000 0432 	LEAF 4, "2DUP"
 153      4455 5000 
 153      0100 
 154               	TWODUP:
 155 032e 6E93 7E93 	    pspush nds_low, nds_high
 156 0332 4E93 5E93 	    pspush tos_low, tos_high
 157 0336 00C0      	    rjmp CORE
 158               	
 159               	;----------------------------------------------------------------------
 160               	; ok 2swap ( a b c d -- c d a b )
 161 0338 0000 0432 	LEAF 4, "2SWAP"
 161      5357 4150 
 161      0001 
 162               	TWOSWAP:
 163               	; get b
 164 0342 9D91 8D91 	    pspull wrk_low, wrk_high
 165 0346 8A93 9A93 	    rspush wrk_low, wrk_high
 166               	; get a
 167 034a 9D91 8D91 	    pspull wrk_low, wrk_high
 168 034e 8A93 9A93 	    rspush wrk_low, wrk_high
 169               	; put c
 170 0352 6E93 7E93 	    pspush nds_low, nds_high
 171               	; put d 
 172 0356 4E93 5E93 	    pspush tos_low, tos_high
 173               	; get a 
 174 035a 7991 6991 	    rspull nds_low, nds_high
 175               	; get b
 176 035e 5991 4991 	    rspull tos_low, tos_high
 177               	
 178 0362 00C0      	    rjmp CORE
 179               	
 325               	
 326               	;----------------------------------------------------------------------
 327               	;
 328               	;    ok 
 329 0364 0000 0531 	LEAF 5, "1+"
 329      2B01 
 330               	ONEPLUS:
 331 036a CA01      	    movw wrk_low, tos_low
 332 036c 0196      	    adiw wrk_low, 1
 333 036e AC01      	    movw tos_low, wrk_low
 334 0370 00C0      	    rjmp CORE
 335               	
 336               	;----------------------------------------------------------------------
 337               	;
 338               	;    ok
 339 0372 0000 0231 	LEAF 2, "1-"
 339      2D00 0100 
 340               	ONEMINUS:
 341 037a CA01      	    movw wrk_low, tos_low
 342 037c 0197      	    sbiw wrk_low, 1
 343 037e AC01      	    movw tos_low, wrk_low
 344 0380 00C0      	    rjmp CORE
 345               	
 346               	;----------------------------------------------------------------------
 347               	#include "bits.inc"
   1               	
   2               	;----------------------------------------------------------------------
   3               	; ????
   4 0382 0000 0842 	LEAF 8, "BITSCLEAR"
   4      4954 5343 
   4      4C45 4152 
   4      0001 
   5               	BITSCLEAR:
   6 0390 6095      	    com nds_low
   7 0392 7095      	    com nds_high
   8 0394 00C0      	    rjmp AND
   9               	
  10               	;----------------------------------------------------------------------
  11               	; ????
  12 0396 0000 0742 	LEAF 7, "BITSSET"
  12      4954 5353 
  12      4554 0100 
  13               	BITSSET:
  14 03a2 6095      	    com nds_low
  15 03a4 7095      	    com nds_high
  16 03a6 00C0      	    rjmp AND
  17               	
  18               	;----------------------------------------------------------------------
  19               	; ????
  20 03a8 0000 0A42 	LEAF 10, "BITSTOGGLE"
  20      4954 5354 
  20      4F47 474C 
  20      4500 0100 
  21               	BITSTOGGLE:
  22 03b8 6095      	    com nds_low
  23 03ba 7095      	    com nds_high
  24 03bc 00C0      	    rjmp AND
  25               	
 348               	
 349               	;----------------------------------------------------------------------
 350               	;  ok 0>
 351 03be 0000 0230 	LEAF 2, "0>"
 351      3E00 0100 
 352               	ZEROGT:
 353 03c6 CA01 AB01 	    pull_wrk
 353      7D91 6D91 
 354 03ce 0197      	    sbiw wrk_low, 1
 355 03d0 04F4      	    brge _ZEROGT1
 356 03d2 00C0      	    rjmp FTRUE
 357               	_ZEROGT1:
 358 03d4 00C0      	    rjmp FFALSE
 359               	;----------------------------------------------------------------------
 360               	;  ok 0<
 361 03d6 0000 0230 	LEAF 2, "0<"
 361      3C00 0100 
 362               	ZEROLT:
 363 03de CA01 AB01 		pull_wrk
 363      7D91 6D91 
 364 03e6 0197      	    sbiw wrk_low, 1
 365 03e8 04F4      	    brge _ZEROLT1
 366 03ea 00C0      	    rjmp FFALSE
 367               	_ZEROLT1:
 368 03ec 00C0      	    rjmp FTRUE
 369               	
 370               	;----------------------------------------------------------------------
 371               	; ok 0=
 372 03ee 0000 0230 	LEAF 2, "0="
 372      3D00 0100 
 373               	ZEROEQ:
 374 03f6 CA01 AB01 		pull_wrk
 374      7D91 6D91 
 375 03fe 0197      	    sbiw wrk_low, 1
 376 0400 01F0      	    breq _ZEROEQ1
 377 0402 00C0      	    rjmp FFALSE
 378               	_ZEROEQ1:
 379 0404 00C0      	    rjmp FTRUE
 380               	
 381               	;----------------------------------------------------------------------
 382               	; ok XOR
 383 0406 0000 0358 	LEAF 3, "XOR"
 383      4F52 0100 
 384               	XOR:
 385 040e 6427      	    eor nds_low, tos_low
 386 0410 7527      	    eor nds_high, tos_high
 387 0412 00C0      	    rjmp DROP
 388               	
 389               	;----------------------------------------------------------------------
 390               	; ok AND
 391 0414 0000 0341 	LEAF 3, "AND"
 391      4E44 0100 
 392               	AND:
 393 041c 6423      	    and nds_low, tos_low
 394 041e 7523      	    and nds_high, tos_high
 395 0420 00C0      	    rjmp DROP
 396               	
 397               	;----------------------------------------------------------------------
 398               	; ok OR
 399 0422 0000 024F 	LEAF 2, "OR"
 399      5200 0100 
 400               	OR:
 401 042a 642B      	    or nds_low, tos_low
 402 042c 752B      	    or nds_high, tos_high
 403 042e 00C0      	    rjmp DROP
 404               	
 405               	;----------------------------------------------------------------------
 406               	; ok +
 407 0430 0000 012B 	LEAF 1, "+"
 407      0100 
 408               	PLUS:
 409 0436 640F      	    add nds_low, tos_low
 410 0438 751F      	    adc nds_high, tos_high
 411 043a 00C0      	    rjmp DROP
 412               	
 413               	;----------------------------------------------------------------------
 414               	; ok -
 415 043c 0000 012D 	LEAF 1, "-"
 415      0100 
 416               	MINUS:
 417 0442 641B      	    sub nds_low, tos_low
 418 0444 750B      	    sbc nds_high, tos_high
 419 0446 00C0      	    rjmp DROP
 420               	
 421               	;----------------------------------------------------------------------
 422               	; <
 423 0448 0000 013C 	LEAF 1, "<"
 423      0100 
 424               	LTHAN:
 425 044e 641B      	    sub nds_low, tos_low
 426 0450 750B      	    sbc nds_high, tos_high
 427 0452 04F0      	    brlt _LTHAN1
 428 0454 00C0      	    rjmp FTRUE
 429               	_LTHAN1:
 430 0456 00C0      	    rjmp FFALSE
 431               	
 432               	;----------------------------------------------------------------------
 433               	; >
 434 0458 0000 013E 	LEAF 1, ">"
 434      0100 
 435               	GTHAN:
 436 045e 641B      	    sub nds_low, tos_low
 437 0460 750B      	    sbc nds_high, tos_high
 438 0462 04F4      	    brge _GTHAN1
 439 0464 00C0      	    rjmp FFALSE
 440               	_GTHAN1:
 441 0466 00C0      	    rjmp FTRUE
 442               	
 443               	;----------------------------------------------------------------------
 444               	; >
 445 0468 0000 013D 	LEAF 1, "="
 445      0100 
 446               	EQUAL:
 447 046e 641B      	    sub nds_low, tos_low
 448 0470 750B      	    sbc nds_high, tos_high
 449 0472 01F0      	    breq _EQUAL1
 450 0474 00C0      	    rjmp FFALSE
 451               	_EQUAL1:
 452 0476 00C0      	    rjmp FTRUE
 453               	
 454               	;----------------------------------------------------------------------
 455               	; ok INV
 456 0478 0000 0349 	LEAF 3, "INV"
 456      4E56 0100 
 457               	INV:
 458 0480 4095      	    com tos_low
 459 0482 5095      	    com tos_high
 460 0484 00C0      	    rjmp CORE
 461               	
 462               	;----------------------------------------------------------------------
 463               	; ok NEG
 464 0486 0000 034E 	LEAF 3, "NEG"
 464      4547 0100 
 465               	NEG:
 466 048e 4195      	    neg tos_low
 467 0490 5195      	    neg tos_high
 468 0492 00C0      	    rjmp CORE
 469               	
 470               	;----------------------------------------------------------------------
 471               	; ok 2*
 472 0494 0000 0232 	LEAF 2, "2*"
 472      2A00 0100 
 473               	SHL:
 474 049c 440F      	    lsl tos_low
 475 049e 551F      	    rol tos_high
 476 04a0 00C0      	    rjmp CORE
 477               	
 478               	;----------------------------------------------------------------------
 479               	; ok 2/
 480 04a2 0000 0232 	LEAF 2, "2/"
 480      2F00 0100 
 481               	SHR:
 482 04aa 5595      	    asr tos_high
 483 04ac 4795      	    ror tos_low
 484 04ae 00C0      	    rjmp CORE
 485               	
 486               	;----------------------------------------------------------------------
 487               	; UM+
 488 04b0 0000 0355 	LEAF 3, "UM+"
 488      4D2B 0100 
 489               	UPLUS:
 490               	    ; do signed plus
 491 04b8 640F      	    add nds_low, tos_low
 492 04ba 751F      	    adc nds_high, tos_high
 493               	    ; preserve carry at tos
 494 04bc 4427      	    eor tos_low, tos_low
 495 04be 5527      	    eor tos_high, tos_high
 496 04c0 441F      	    rol tos_low
 497 04c2 00C0      	    rjmp CORE
 498               	
 499               	;----------------------------------------------------------------------
 500               	;
 501               	; CMOVE copy from source++ to destination++, decrease w
 502 04c4 0000 0543 	LEAF 5, "CMOVE"
 502      4D4F 5645 
 502      0100 
 503               	CMOVE:
 504               	    ; WARNING No bound check
 505               	    ; tos source
 506               	    ; nds destination
 507               	    ; w   1 or many, 0 does nothing
 508               	
 509               	;    source exchange tos to psp (Y)
 510               	
 511 04ce CA01      	    movw wrk_low, tos_low
 512 04d0 AD01      	    movw tos_low, psp_low
 513 04d2 DC01      	    movw psp_low, wrk_low
 514               	
 515               	;    destination exchange nds and rsp (X)
 516               	
 517 04d4 CB01      	    movw wrk_low, nds_low
 518 04d6 BE01      	    movw nds_low, rsp_low
 519 04d8 EC01      	    movw rsp_low, wrk_low
 520               	
 521               	    ; get the counter
 522 04da 9D91 8D91 	    pspull wrk_low, wrk_high
 523               	
 524               	    ; no offset
 525               	
 526               	_CMOVE1:
 527               	    ; decrease counter
 528               	
 529 04de 0197      	    sbiw wrk_low, 1
 530 04e0 04F0      	    brlt _CMOVE2
 531               	
 532               	    ; move a byte
 533 04e2 0990      	    ld _work_, Y+
 534 04e4 0D92      	    st X+, _work_
 535               	
 536               	    ; again
 537 04e6 00C0      	    rjmp _CMOVE1
 538               	
 539               	_CMOVE2:
 540               	
 541 04e8 DA01      	    movw psp_low, tos_low
 542 04ea EB01      	    movw rsp_low, nds_low
 543               	
 544 04ec 5991 4991 	    rspull tos_low, tos_high
 545 04f0 7991 6991 	    rspull nds_low, nds_high
 546               	
 547 04f4 00C0      	    rjmp  CORE
 548               	
 549               	;----------------------------------------------------------------------
 550               	; CMOVE> copy from source+w to destination+w, decrease w
 551 04f6 0000 0543 	LEAF 5, "CMOVE>"
 551      4D4F 5645 
 551      3E01 
 552               	CMOVEGT:
 553               	    ; WARNING No bound check
 554               	    ; tos source
 555               	    ; nds destination
 556               	    ; w 1 or many, 0 does nothing
 557               	
 558               	;    source exchange tos and psp (Y)
 559               	
 560 0500 CA01      	    movw wrk_low, tos_low
 561 0502 AD01      	    movw tos_low, psp_low
 562 0504 DC01      	    movw psp_low, wrk_low
 563               	
 564               	;    destination exchange nds and rsp (X)
 565               	
 566 0506 CB01      	    movw wrk_low, nds_low
 567 0508 BE01      	    movw nds_low, rsp_low
 568 050a EC01      	    movw rsp_low, wrk_low
 569               	
 570               	    ; get the counter
 571 050c 9D91 8D91 	    pspull wrk_low, wrk_high
 572               	
 573               	    ; offset predecrements
 574               	
 575 0510 0196      	    adiw wrk_low, 1
 576               	
 577 0512 A80F      	    add psp_low, wrk_low
 578 0514 B91F      	    adc psp_high, wrk_high
 579               	
 580 0516 C80F      	    add rsp_low, wrk_low
 581 0518 D91F      	    adc rsp_high, wrk_high
 582               	
 583 051a 0197      	    sbiw wrk_low, 1
 584               	
 585               	_CMOVEGT1:
 586               	    ; decrease counter
 587 051c 0197      	    sbiw wrk_low, 1
 588 051e 04F0      	    brlt _CMOVEGT2
 589               	
 590               	    ; move a byte
 591 0520 0A90      	    ld _work_, -Y
 592 0522 0E92      	    st -X, _work_
 593               	
 594               	    ; again
 595 0524 00C0      	    rjmp _CMOVEGT1
 596               	
 597               	_CMOVEGT2:
 598               	
 599 0526 DA01      	    movw psp_low, tos_low
 600 0528 EB01      	    movw rsp_low, nds_low
 601               	
 602 052a 5991 4991 	    rspull tos_low, tos_high
 603 052e 7991 6991 	    rspull nds_low, nds_high
 604               	
 605 0532 00C0      	    rjmp  CORE
 606               	
 607               	;----------------------------------------------------------------------
 608               	;
 609               	; ok ALIGN, easy as cell is 2 bytes
 610               	; if lsb set sum 1
 611               	;
 612 0534 0000 0541 	LEAF 5, "ALIGN"
 612      4C49 474E 
 612      0100 
 613               	ALLIGN:
 614 053e CA01      	    movw wrk_low, tos_low
 615 0540 0196      	    adiw wrk_low, 1
 616 0542 AC01      	    movw tos_low, wrk_low
 617 0544 4695      	    lsr tos_low
 618 0546 440F      	    lsl tos_low
 619 0548 00C0      	    rjmp CORE
 620               	
 621               	;----------------------------------------------------------------------
 622               	;
 623               	; ok CELL is 2 ; size of a cell
 624               	;
 625 054a 0000 0243 	LEAF 2, "CELL"
 625      454C 4C00 
 625      0100 
 626               	CELLSZ:
 627 0554 82E0      	    ldi wrk_low, CELL_SIZE
 628 0556 9927      	    eor wrk_high, wrk_high
 629 0558 00C0      	    rjmp PUSHS
 630               	
 631               	;----------------------------------------------------------------------
 632               	;
 633               	; ok CELL is 2, multiply by 2
 634               	;
 635 055a 0000 0543 	LEAF 5, "CELLS"
 635      454C 4C53 
 635      0100 
 636               	CELLS:
 637 0564 00C0      	    rjmp SHL
 638               	
 639               	;----------------------------------------------------------------------
 640               	;
 641               	; ok add CELL_SIZE
 642               	;
 643 0566 0000 0543 	LEAF 5, "CELL+"
 643      454C 4C2B 
 643      0100 
 644               	CELLPLUS:
 645 0570 CA01      	    movw wrk_low, tos_low
 646 0572 0296      	    adiw wrk_low, CELL_SIZE
 647 0574 AC01      	    movw tos_low, wrk_low
 648 0576 00C0      	    rjmp CORE
 649               	
 650               	;----------------------------------------------------------------------
 651               	;
 652               	; ok sub CELL_SIZE
 653               	;
 654 0578 0000 0543 	LEAF 5, "CELL-"
 654      454C 4C2D 
 654      0100 
 655               	CELLMINUS:
 656 0582 CA01      	    movw wrk_low, tos_low
 657 0584 0297      	    sbiw wrk_low, CELL_SIZE
 658 0586 AC01      	    movw tos_low, wrk_low
 659 0588 00C0      	    rjmp CORE
 660               	
 661               	;----------------------------------------------------------------------
 662               	; ????
 663               	;
 664               	; http://www.avr-asm-tutorial.net/avr_en/apps/random_tn13/random_calc_tn13.html
 665               	;
 666               	;    good seeds
 667               	;
 668               	;    B167 4A3C 9879 B61E 7B26 
 669               	;    A858 1F88 50D5 419D 5537
 670               	;    0224 0527 5EB6 1E6D BCDC
 671               	;    92FF C206 0ECD 9361 2823
 672               	;    BE0B B303 6462 0E4C 3D24
 673               	;
 674 058a 0000 035F 	LEAF 3, "_RND_"
 674      524E 445F 
 674      0100 
 675               	RND:
 676               	;    load seed
 677 0594 8091 0000 	    lds wrk_low, _RANDW
 678 0598 9091 0000 	    lds wrk_high, _RANDW + 1
 679               	;
 680               	;    run magics
 681               	;
 682 059c 8927      	    eor    wrk_low, wrk_high
 683 059e 8295      	    swap wrk_low
 684 05a0 980F      	    add wrk_high, wrk_low
 685               	
 686               	;    save seed
 687 05a2 8093 0000 	    sts _RANDW, wrk_low
 688 05a6 9093 0000 	    sts _RANDW + 1, wrk_high
 689               	;
 690 05aa 00C0      	    rjmp PUSHS
 691               	    
 692               	;----------------------------------------------------------------------
 693               	;
 694               	; trampoline for 127 primitives
 695               	;
 696               	;----------------------------------------------------------------------
 697               	;
 698               	; order IS opcode sequence
 699               	;
 700               	;---------------------------------------------------------------------
 701               	JUMPS:
 702               	
 703               	;---------------------------------------------------------------------
 704               	;
 705               	; do not change order, hard coded in macros
 706               	; opcode 0, 1, 2, 3, 4, 5, 6, 7
 707               	;
 708               	;---------------------------------------------------------------------
 709               	.balign 2
 710               	
 711               	;---------------------------------------------------------------------
 712               	; those are checked first and directly
 713               	;
 714               	;    rjmp NOOP ; 
 715               	;    rjmp CORE ; 
 716               	;    rjmp ENTER ; 
 717               	;    rjmp EXIT ; 
 718               	
 719               	;---------------------------------------------------------------------
 720               	; those are reserved
 721               	;
 722 05ac 00C0      	    rjmp RESET ; reserved
 723 05ae 00C0      	    rjmp CORE ; reserved
 724 05b0 00C0      	    rjmp CORE ; reserved
 725 05b2 00C0      	    rjmp CORE ; reserved
 726               	
 727               	;---------------------------------------------------------------------
 728               	;
 729               	; could NOT change order after done dictionary.
 730               	;
 731               	;---------------------------------------------------------------------
 732               	.balign 2
 733               	
 734 05b4 00C0      	    rjmp ABORT 
 735 05b6 00C0      	    rjmp ALLIGN 
 736 05b8 00C0      	    rjmp AND 
 737 05ba 00C0      	    rjmp AT 
 738 05bc 00C0      	    rjmp BITSCLEAR 
 739 05be 00C0      	    rjmp BITSSET 
 740 05c0 00C0      	    rjmp BITSTOGGLE 
 741 05c2 00C0      	    rjmp BRANCH 
 742 05c4 00C0      	    rjmp BYE 
 743 05c6 00C0      	    rjmp CAT 
 744 05c8 00C0      	    rjmp CELLMINUS 
 745 05ca 00C0      	    rjmp CELLPLUS 
 746 05cc 00C0      	    rjmp CELLS 
 747 05ce 00C0      	    rjmp CELLSZ 
 748 05d0 00C0      	    rjmp CMOVE 
 749 05d2 00C0      	    rjmp CMOVEGT 
 750 05d4 00C0      	    rjmp CTO 
 751 05d6 00C0      	    rjmp DOLIT 
 752               	;    rjmp DOVAR 
 753               	;	 rjmp DOCON
 754 05d8 00C0      	    rjmp DROP 
 755 05da 00C0      	    rjmp DSHL 
 756 05dc 00C0      	    rjmp DSHR 
 757 05de 00C0      	    rjmp DUP 
 758 05e0 00C0      	    rjmp EMITQM 
 759 05e2 00C0      	    rjmp EQUAL 
 760 05e4 00C0      	    rjmp EXEC 
 761 05e6 00C0      	    rjmp GTHAN 
 762 05e8 00C0      	    rjmp GTR 
 763 05ea 00C0      	    rjmp INV 
 764 05ec 00C0      	    rjmp IOYO 
 765 05ee 00C0      	    rjmp KEYQM 
 766 05f0 00C0      	    rjmp LTHAN 
 767 05f2 00C0      	    rjmp MINUS 
 768 05f4 00C0      	    rjmp NEG 
 769 05f6 00C0      	    rjmp NOOP 
 770 05f8 00C0      	    rjmp ONEMINUS 
 771 05fa 00C0      	    rjmp ONENEG 
 772 05fc 00C0      	    rjmp ONEPLUS 
 773 05fe 00C0      	    rjmp OR 
 774 0600 00C0      	    rjmp OVER 
 775 0602 00C0      	    rjmp PLUS 
 776 0604 00C0      	    rjmp PLUSTO 
 777 0606 00C0      	    rjmp PSAT 
 778 0608 00C0      	    rjmp PSTO 
 779 060a 00C0      	    rjmp PUSHS 
 780 060c 00C0      	    rjmp QMBRANCH 
 781 060e 00C0      	    rjmp QMDUP 
 782 0610 00C0      	    rjmp QUIT 
 783 0612 00C0      	    rjmp RAT 
 784 0614 00C0      	    rjmp RGT 
 785 0616 00C0      	    rjmp ROT 
 786 0618 00C0      	    rjmp RSAT 
 787 061a 00C0      	    rjmp RSTO 
 788 061c 00C0      	    rjmp SDIV 
 789 061e 00C0      	    rjmp SHL 
 790 0620 00C0      	    rjmp SHR 
 791 0622 00C0      	    rjmp SMUL 
 792 0624 00C0      	    rjmp SWAP 
 793 0626 00C0      	    rjmp TO 
 794 0628 00C0      	    rjmp TWODROP 
 795 062a 00C0      	    rjmp TWODUP 
 796 062c 00C0      	    rjmp TWOSWAP
 797 062e 00C0      	    rjmp UMBYMOD 
 798 0630 00C0      	    rjmp UMUL 
 799 0632 00C0      	    rjmp UPLUS 
 800 0634 00C0      	    rjmp XOR 
 801 0636 00C0      	    rjmp ZERO 
 802 0638 00C0      	    rjmp ZEROEQ 
 803 063a 00C0      	    rjmp ZEROGT 
 804 063c 00C0      	    rjmp ZEROLT 
 805               	
 806               	;---------------------------------------------------------------------
 807               	;
 808               	; check in CORE have 3 dec
 809               	;
 810               	_CORE:
 811               	    
 812               	; offset by multiply by 2
 813               	
 814 063e 000C      	    lsl r0
 815 0640 111C      	    rol r1
 816               	
 817               	; load table address
 818               	
 819 0642 80E0      	    ldi wrk_low, lo8(JUMPS)
 820 0644 90E0      	    ldi wrk_high, hi8(JUMPS)
 821               	
 822               	; take offset
 823               	
 824 0646 800D      	    add wrk_low, r0
 825 0648 911D      	    adc wrk_high, r1
 826               	
 827               	; pseudo
 828               	; why not:  movw r30, r24; ijmp;
 829               	
 830 064a 8F93      	    push wrk_low
 831 064c 9F93      	    push wrk_high
 832 064e 0895      	    ret
 833               	
 834               	;---------------------------------------------------------------------
 835               	;
 836               	; end trampoline
 837               	;
 838               	;----------------------------------------------------------------------
 839               	
 840               	;----------------------------------------------------------------------
 841               	; ????
 842 0650 0000 0344 	LEAF 3, "D2/"
 842      322F 0100 
 843               	DSHR:
 844 0658 6695      	    lsr nds_low
 845 065a 7795      	    ror nds_high
 846 065c 4795      	    ror tos_low
 847 065e 5795      	    ror tos_high
 848 0660 00C0      	    rjmp CORE
 849               	
 850               	;----------------------------------------------------------------------
 851               	; ????
 852 0662 0000 0344 	LEAF 3, "D2*"
 852      322A 0100 
 853               	DSHL:
 854 066a 660F      	    lsl nds_low
 855 066c 771F      	    rol nds_high
 856 066e 441F      	    rol tos_low
 857 0670 551F      	    rol tos_high
 858 0672 00C0      	    rjmp CORE
 859               	
 860               	;----------------------------------------------------------------------
 861               	;
 862               	;    "div16u" - 16/16 Bit Unsigned Division
 863               	;
 864               	; ok UM/MOD
 865 0674 0000 0655 	LEAF 6, "UM/MOD"
 865      4D2F 4D4F 
 865      4400 0100 
 866               	UMBYMOD:
 867               	;
 868               	;***** Subroutine Register Variables
 869               	
 870               	#define drem16uL r14
 871               	#define drem16uH r15
 872               	#define dres16uL r16
 873               	#define dres16uH r17
 874               	
 875               	#define dd16uL r16
 876               	#define dd16uH r17
 877               	#define dv16uL r18
 878               	#define dv16uH r19
 879               	
 880               	#define dcnt16u r20
 881               	
 882               	;
 883               	;    move operands
 884               	;
 885 0680 8B01      	    movw r16, nds_low
 886 0682 9A01      	    movw r18, tos_low
 887               	;
 888               	;***** Code
 889               	
 890 0684 8827      	div16u: clr wrk_low ;clear remainder Low byte
 891 0686 991B      	    sub wrk_high,wrk_high;clear remainder High byte and carry
 892 0688 01E1      	    ldi r16,17 ;init loop counter
 893 068a 661F      	d16u_1: rol nds_low ;shift left dividend
 894 068c 771F      	    rol nds_high
 895 068e 0A95      	    dec r16 ;decrement counter
 896 0690 01F4      	    brne d16u_2 ;if done
 897               	d16ures:
 898               	;
 899               	;    move operands
 900               	;
 901 0692 B801      	    movw nds_low, r16
 902 0694 A701      	    movw tos_low, r14
 903 0696 00C0      	    rjmp CORE
 904               	
 905 0698 881F      	d16u_2: rol wrk_low ;shift dividend into remainder
 906 069a 991F      	    rol wrk_high
 907 069c 841B      	    sub wrk_low,tos_low ;remainder = remainder - divisor
 908 069e 950B      	    sbc wrk_high,tos_high ;
 909 06a0 00F4      	    brcc d16u_3 ;if result negative
 910 06a2 840F      	    add wrk_low,tos_low ; restore remainder
 911 06a4 951F      	    adc wrk_high,tos_high
 912 06a6 8894      	    clc ; clear carry to be shifted into result
 913 06a8 00C0      	    rjmp d16u_1 ;else
 914 06aa 0894      	d16u_3: sec ; set carry to be shifted into result
 915 06ac 00C0      	    rjmp d16u_1
 916               	
 917               	
 918               	;----------------------------------------------------------------------
 919               	;
 920               	;    "div16s" - 16/16 Bit Signed Division
 921               	;
 922               	; ok /
 923 06ae 0000 012F 	LEAF 1, "/"
 923      0100 
 924               	SDIV:
 925               	;
 926               	;***** Subroutine Register Variables
 927               	;
 928               	
 929               	#define drem16sL r14
 930               	#define drem16sH r15
 931               	#define dres16sL r16
 932               	#define dres16sH r17
 933               	
 934               	#define dd16sL r16
 935               	#define dd16sH r17
 936               	#define dv16sL r18
 937               	#define dv16sH r19
 938               	
 939               	
 940               	#define dcnt16s r20
 941               	
 942               	#define    d16s    r21
 943               	
 944               	;
 945               	;    move operands
 946               	;
 947 06b4 8B01      	    movw r16, nds_low
 948 06b6 9A01      	    movw r18, tos_low
 949               	;
 950               	;***** Code
 951               	;
 952 06b8 512F      	div16s: mov    d16s,dd16sH    ;move dividend High to sign register
 953 06ba 5327      	    eor    d16s,dv16sH    ;xor divisor High with sign register
 954 06bc 17FF      	    sbrs    dd16sH,7    ;if MSB in dividend set
 955 06be 00C0      	    rjmp    d16s_1
 956 06c0 1095      	    com    dd16sH    ;    change sign of dividend
 957 06c2 0095      	    com    dd16sL
 958 06c4 0F5F      	    subi    dd16sL,lo8(-1)
 959 06c6 0F4F      	    sbci    dd16sL,hi8(-1)
 960 06c8 37FF      	d16s_1: sbrs    dv16sH,7    ;if MSB in divisor set
 961 06ca 00C0      	    rjmp    d16s_2
 962 06cc 3095      	    com    dv16sH    ;    change sign of divisor
 963 06ce 2095      	    com    dv16sL
 964 06d0 2F5F      	    subi    dv16sL,lo8(-1)
 965 06d2 2F4F      	    sbci    dv16sL,hi8(-1)
 966 06d4 EE24      	d16s_2: clr    drem16sL    ;clear remainder Low byte
 967 06d6 FF18      	    sub    drem16sH,drem16sH;clear remainder High byte and carry
 968 06d8 41E1      	    ldi    dcnt16s,17     ;init loop counter
 969               	
 970 06da 001F      	d16s_3: rol    dd16sL    ;shift left dividend
 971 06dc 111F      	    rol    dd16sH
 972 06de 4A95      	    dec    dcnt16s    ;decrement counter
 973 06e0 01F4      	    brne    d16s_5    ;if done
 974 06e2 57FF      	    sbrs    d16s,7    ;    if MSB in sign register set
 975 06e4 00C0      	    rjmp    d16s_4
 976 06e6 1095      	    com    dres16sH    ;    change sign of result
 977 06e8 0095      	    com    dres16sL
 978 06ea 0F5F      	    subi    dres16sL,lo8(-1)
 979 06ec 1F4F      	    sbci    dres16sH,hi8(-1)
 980               	d16s_4:      ;    return
 981               	d16sres:
 982 06ee B801      	    movw nds_low, r16
 983 06f0 A701      	    movw tos_low, r14
 984 06f2 00C0      	    rjmp CORE
 985               	
 986 06f4 EE1C      	d16s_5: rol    drem16sL    ;shift dividend into remainder
 987 06f6 FF1C      	    rol    drem16sH
 988 06f8 E21A      	    sub    drem16sL,dv16sL ;remainder = remainder - divisor
 989 06fa F30A      	    sbc    drem16sH,dv16sH ;
 990 06fc 00F4      	    brcc    d16s_6    ;if result negative
 991 06fe E20E      	    add    drem16sL,dv16sL ;    restore remainder
 992 0700 F31E      	    adc    drem16sH,dv16sH
 993 0702 8894      	    clc     ;    clear carry to be shifted into result
 994 0704 00C0      	    rjmp    d16s_3    ;else
 995 0706 0894      	d16s_6: sec     ;    set carry to be shifted into result
 996 0708 00C0      	    rjmp    d16s_3
 997               	
 998               	;----------------------------------------------------------------------
 999               	;
 1000               	;* "mpy16s" - 16x16 Bit Signed Multiplication
 1001               	; ok *
 1002 070a 0000 012A 	LEAF 1, "*"
 1002      0100 
 1003               	SMUL:
 1004               	;***** Subroutine Register Variables
 1005               	
 1006               	#define mc16sL r16
 1007               	#define mc16sH r17     
 1008               	#define mp16sL r18     
 1009               	#define mp16sH r19     
 1010               	
 1011               	#define m16s0 r18    
 1012               	#define m16s1 r19    
 1013               	#define m16s2 r20     
 1014               	#define m16s3 r21    
 1015               	
 1016               	#define mcnt16s r22     
 1017               	
 1018               	;
 1019               	;    move operands
 1020               	;
 1021 0710 8B01      	    movw r16, nds_low
 1022 0712 9A01      	    movw r18, tos_low
 1023               	;
 1024               	;***** Code
 1025 0714 5527      	mpy16s: clr    m16s3     ;clear result byte 3
 1026 0716 441B      	    sub    m16s2,m16s2    ;clear result byte 2 and carry
 1027 0718 60E1      	    ldi    mcnt16s,16     ;init loop counter
 1028 071a 00F4      	m16s_1: brcc    m16s_2    ;if carry (previous bit) set
 1029 071c 400F      	    add    m16s2,mc16sL    ;    add multiplicand Low to result byte 2
 1030 071e 511F      	    adc    m16s3,mc16sH    ;    add multiplicand High to result byte 3
 1031 0720 20FD      	m16s_2: sbrc    mp16sL,0    ;if current bit set
 1032 0722 401B      	    sub    m16s2,mc16sL    ;    sub multiplicand Low from result byte 2
 1033 0724 20FD      	    sbrc    mp16sL,0    ;if current bit set
 1034 0726 510B      	    sbc    m16s3,mc16sH    ;    sub multiplicand High from result byte 3
 1035 0728 5595      	    asr    m16s3     ;shift right result and multiplier
 1036 072a 4795      	    ror    m16s2
 1037 072c 3795      	    ror    m16s1
 1038 072e 2795      	    ror    m16s0
 1039 0730 6A95      	    dec    mcnt16s    ;decrement counter
 1040 0732 01F4      	    brne    m16s_1    ;if not done, loop more
 1041               	m16sres:
 1042 0734 602F      	    mov nds_low, r16
 1043 0736 00C0      	    rjmp CORE
 1044               	
 1045               	;----------------------------------------------------------------------
 1046               	;
 1047               	; "mpy16u" - 16x16 Bit Unsigned Multiplication
 1048               	;
 1049               	; ok UM*
 1050 0738 0000 0355 	LEAF 3, "UM*"
 1050      4D2A 0100 
 1051               	UMUL:
 1052               	;
 1053               	;***** Subroutine Register Variables
 1054               	
 1055               	#define mc16uL r16
 1056               	#define mc16uH r17
 1057               	#define mp16uL r18
 1058               	#define mp16uH r19
 1059               	
 1060               	#define m16u0 r18     
 1061               	#define m16u1 r19     
 1062               	#define m16u2 r20     
 1063               	#define m16u3 r21     
 1064               	
 1065               	#define mcnt16u r22     
 1066               	
 1067               	;
 1068               	;    move operands
 1069               	;
 1070 0740 8B01      	    movw r16, nds_low
 1071 0742 9A01      	    movw r18, tos_low
 1072               	;
 1073               	;***** Code
 1074               	;
 1075 0744 9927      	mpy16u: clr wrk_high ;clear 2 highest bytes of result
 1076 0746 8827      	    clr wrk_low
 1077 0748 00E1      	    ldi r16,16 ;init loop counter
 1078 074a 5695      	    lsr tos_high
 1079 074c 4795      	    ror tos_low
 1080               	
 1081 074e 00F4      	m16u_1: brcc noad8 ;if bit 0 of multiplier set
 1082 0750 860F      	    add wrk_low,nds_low ;add multiplicand Low to byte 2 of res
 1083 0752 971F      	    adc wrk_high,nds_high ;add multiplicand high to byte 3 of res
 1084 0754 9795      	noad8: ror wrk_high ;shift right result byte 3
 1085 0756 8795      	    ror wrk_low ;rotate right result byte 2
 1086 0758 3795      	    ror r19 ;rotate result byte 1 and multiplier High
 1087 075a 2795      	    ror r18 ;rotate result byte 0 and multiplier Low
 1088 075c 0A95      	    dec r16 ;decrement loop counter
 1089 075e 01F4      	    brne m16u_1 ;if not done, loop more
 1090               	m16ures:
 1091               	;
 1092               	;    move operands
 1093               	;
 1094 0760 B901      	    movw nds_low, r18
 1095 0762 00C0      	    rjmp CORE
 1096               	
 1097               	;----------------------------------------------------------------------
 1098               	
 1099               	;----------------------------------------------------------------------
 1100               	;*************************************************************************
 1101               	;*     *
 1102               	;*      Convert unsigned 16 bit to 5 digit ASCII    *
 1103               	;*     *
 1104               	;*    Author: Peter Dannegger     *
 1105               	;*     *
 1106               	;*************************************************************************
 1107               	; https://www.avrfreaks.net/forum/smallest-and-fastest-binary-bcd-conversion?page=all
 1108               	;
 1109               	;
 1110               	;input: R17, R16 = 16 bit value 0 ... 65535
 1111               	;output: R20, R19, R18, R17, R16 = 5 digits (ASCII)
 1112               	;cycle: 20 ... 170
 1113               	;
 1114               	
 1115               	bin16_ascii:
 1116               	
 1117 0764 4FE2      	    ldi    r20, -1 + '0'
 1118 0766 4395      	_bcd1:  inc    r20
 1119 0768 0051      	    subi    r16, lo8(10000)    
 1120 076a 1742      	    sbci    r17, hi8(10000)
 1121 076c 00F4      	    brcc    _bcd1
 1122               	
 1123 076e 3AE3      	    ldi    r19, 10 + '0'
 1124 0770 3A95      	_bcd2:  dec    r19
 1125 0772 0851      	    subi    r16, lo8(-1000)  
 1126 0774 1C4F      	    sbci    r17, hi8(-1000)
 1127 0776 00F0      	    brcs    _bcd2
 1128               	
 1129 0778 2FE2      	    ldi    r18, -1 + '0'
 1130 077a 2395      	_bcd3:  inc    r18
 1131 077c 0456      	    subi    r16, lo8(100)   
 1132 077e 1040      	    sbci    r17, hi8(100)
 1133 0780 00F4      	    brcc    _bcd3
 1134               	
 1135 0782 1AE3      	    ldi    r17, 10 + '0'
 1136 0784 1A95      	_bcd4:  dec    r17
 1137 0786 065F      	    subi    r16, -10     
 1138 0788 00F0      	    brcs    _bcd4
 1139               	
 1140 078a 005D      	    subi    r16, -'0'
 1141 078c 0895      	    ret
 1142               	
 1143               	;----------------------------------------------------------------------
 1144               	#include "constants.inc" 
   1               	/*
   2               	;----------------------------------------------------------------------
   3               	;
   4               	;     define ascii constants 
   5               	;
   6               	; from forth std 2012
   7               	\z    NUL(no character,ASCII 0)
   8               	\a    BEL(alert,ASCII 7)
   9               	\b    BS(backspace,ASCII 8)
  10               	\t    HT(horizontal tab,ASCII 9)
  11               	\v    VT(vertical tab,ASCII 11)
  12               	\f    FF(form feed,ASCII 12)
  13               	\r    CR(carriage return,ASCII 13)
  14               	\l    LF(line feed,ASCII 10)
  15               	\m    CR/LF pair(ASCII 13, 10)
  16               	\n    newline (implementation dependent , e.g., CR/LF, CR, LF, LF/CR)
  17               	\e    ESC(escape,ASCII 27)
  18               	\q    double-quote (ASCII 34)
  19               	\"    double-quote(ASCII 34)
  20               	\\    backslash itself(ASCII 92)
  21               	\x    ãhexdigitããhexdigitã    The resulting character is the conversion of these two hexade
  22               	                            An ambiguous conditions exists if \x is not followed by two hexadecimal
  23               	*/
  24               	
  25               	/*
  26               	: ':'
  27               	    [        \ go into immediate mode (temporarily)
  28               	    CHAR :   \ push the number 58 (ASCII code of colon) on the parameter stack
  29               	    ]        \ go back to compile mode
  30               	    LITERAL  \ compile LIT 58 as the definition of ':' word
  31               	;
  32               	
  33               	\ A few more character constants defined the same way as above.
  34               	: ';' [ CHAR ; ] LITERAL ;
  35               	: '(' [ CHAR ( ] LITERAL ;
  36               	: ')' [ CHAR ) ] LITERAL ;
  37               	: '"' [ CHAR " ] LITERAL ;
  38               	: 'A' [ CHAR A ] LITERAL ;
  39               	: '0' [ CHAR 0 ] LITERAL ;
  40               	: '-' [ CHAR - ] LITERAL ;
  41               	: '.' [ CHAR . ] LITERAL ;
  42               	*/
  43               	
  44               	
  45               	        NIL = 0         ;   \0    null
  46               	        _BL = 7         ;   ^g    \a    bell mark
  47               	        _BS = 8         ;   ^h    \b    backspace
  48               	        _TB = 9         ;   ^i    \t    horizontal tab
  49               	        _LF = 10        ;   ^j    \n    line feed
  50               	        _VT = 11        ;   ^v    \v    vertical tab
  51               	        _FF = 12        ;   ^l    \f    form feed
  52               	        _CR = 13        ;   ^m    \r    carriage return
  53               	        _CN = 24        ;   cancel
  54               	        _ES = 27        ;   ^[    \e    escape
  55               	
  56               	        _BL = 32        ;    space blank character
  57               	        _QK = 34        ;   " quotation mark
  58               	        _OP = 40        ;   ( open
  59               	        _CP = 41        ;   ) close
  60               	        _BH = 92        ;   \ backslash
  61               	        _US = 95        ;   _ underscore
  62               	
  63               	;----------------------------------------------------------------------
  64               	;       NIL = 0        ;    0    \0    null
  65 078e 0000 024E 	TWIG 2, "NIL"
  65      494C 0002 
  66               	NULL:
  67 0796 0000      	.word    DOLIT
  68 0798 00        	.byte    NIL
  69 0799 00        	.byte    NIL
  70 079a 0000      	.word    EXIT    ;    exit
  71               	        
  72               	;----------------------------------------------------------------------
  73               	;      BELL = 7        ;    ^g    \a    bell mark
  74               	;TWIG 2, "BE"
  75               	;BE:
  76               	;.word    DOLIT
  77               	;.byte    _BE
  78               	;.byte    NIL
  79               	;.word    EXIT    ;    exit
  80               	        
  81               	;----------------------------------------------------------------------
  82               	;      BSC = 8        ;    ^h    \b    backspace
  83 079c 0000 0242 	TWIG 2, "BS"
  83      5300 0200 
  84               	BS:
  85 07a4 0000      	.word    DOLIT
  86 07a6 08        	.byte    _BS
  87 07a7 00        	.byte    NIL
  88 07a8 0000      	.word    EXIT    ;    exit
  89               	        
  90               	;----------------------------------------------------------------------
  91               	;       TB = 9        ;    ^i    \t    horizontal tab
  92 07aa 0000 0254 	TWIG 2, "TB"
  92      4200 0200 
  93               	TB:
  94 07b2 0000      	.word    DOLIT
  95 07b4 09        	.byte    _TB
  96 07b5 00        	.byte    NIL
  97 07b6 0000      	.word    EXIT    ;    exit
  98               	
  99               	;----------------------------------------------------------------------
 100               	;       LF = 10        ;    ^j    \n    line feed
 101 07b8 0000 024C 	TWIG 2, "LF"
 101      4600 0200 
 102               	LF:
 103 07c0 0000      	.word    DOLIT
 104 07c2 0A        	.byte    _LF
 105 07c3 00        	.byte    NIL
 106 07c4 0000      	.word    EXIT    ;    exit
 107               	
 108               	;----------------------------------------------------------------------
 109               	;       VT = 11        ;    ^v    \v    vertical tab
 110               	;TWIG 2, "VT"
 111               	;VT:
 112               	;.word    DOLIT
 113               	;.byte    _VT
 114               	;.byte    NIL
 115               	;.word    EXIT    ;    exit
 116               	
 117               	;----------------------------------------------------------------------
 118               	;       FF = 12        ;    ^l    \f    form feed, Ctrl-Enter
 119               	;TWIG 2, "FF"
 120               	;FF:
 121               	;.word    DOLIT
 122               	;.byte    _FF
 123               	;.byte    NIL
 124               	;.word    EXIT    ;    exit
 125               	
 126               	;----------------------------------------------------------------------
 127               	;       CR = 13        ;    ^m    \r    carriage return
 128 07c6 0000 0243 	TWIG 2, "CR"
 128      5200 0200 
 129               	CR:
 130 07ce 0000      	.word    DOLIT
 131 07d0 0D        	.byte    _CR
 132 07d1 00        	.byte    NIL
 133 07d2 0000      	.word    EXIT    ;    exit
 134               	
 135               	;----------------------------------------------------------------------
 136               	;       CN = 24        ;    CANCEL
 137               	;TWIG 2, "CN"
 138               	;CN:
 139               	;.word    DOLIT
 140               	;.byte    _CN
 141               	;.byte    NIL
 142               	;.word    EXIT    ;    exit
 143               	
 144               	;----------------------------------------------------------------------
 145               	;       ES = 27        ;    ^[    \e    escape
 146               	;TWIG 2, "ES"
 147               	ES:
 148 07d4 0000      	.word    DOLIT
 149 07d6 1B        	.byte    _ES
 150 07d7 00        	.byte    NIL
 151 07d8 0000      	.word    EXIT    ;    exit
 152               	
 153               	;----------------------------------------------------------------------
 154               	;        BL = 32        ;    space blank character
 155 07da 0000 0242 	TWIG 2, "BL"
 155      4C00 0200 
 156               	BL:
 157 07e2 0000      	.word    DOLIT
 158 07e4 20        	.byte    _BL
 159 07e5 00        	.byte    NIL
 160 07e6 0000      	.word    EXIT    ;    exit
 161               	
 162               	;----------------------------------------------------------------------
 163               	;----------------------------------------------------------------------
 164               	;
 165               	;    why not ? just for fun
 166               	;
 167               	;    ROULETTE    37 numbers of roullete in european order
 168               	;
 169 07e8 0000 0852 	TWIG 8, "ROULETTE"
 169      4F55 4C45 
 169      5454 4500 
 169      0200 
 170               	ROULETTE:
 171 07f6 0000      	.word    EXIT
 172 07f8 0000      	.word   0
 173 07fa 2000      	.word   32
 174 07fc 0F00      	.word   15
 175 07fe 1300      	.word   19
 176 0800 0400      	.word   4
 177 0802 1500      	.word   21
 178 0804 0200      	.word   2
 179 0806 1900      	.word   25
 180 0808 1100      	.word   17
 181 080a 2200      	.word   34
 182 080c 0600      	.word   6
 183 080e 1B00      	.word   27
 184 0810 0D00      	.word   13
 185 0812 2400      	.word   36
 186 0814 0B00      	.word   11
 187 0816 1E00      	.word   30
 188 0818 0800      	.word   8
 189 081a 1700      	.word   23
 190 081c 0A00      	.word   10
 191 081e 0500      	.word   5
 192 0820 1800      	.word   24
 193 0822 1000      	.word   16
 194 0824 2100      	.word   33
 195 0826 0100      	.word   1
 196 0828 1400      	.word   20
 197 082a 0E00      	.word   14
 198 082c 1F00      	.word   31
 199 082e 0900      	.word   9
 200 0830 1600      	.word   22
 201 0832 1200      	.word   18
 202 0834 1D00      	.word   29
 203 0836 0700      	.word   7
 204 0838 1C00      	.word   28
 205 083a 0C00      	.word   12
 206 083c 2300      	.word   35
 207 083e 0300      	.word   3
 208 0840 1A00      	.word   26
 209 0842 0000      	.word    0
 210               	;----------------------------------------------------------------------
 211               	...
 1145               	
 1146               	;----------------------------------------------------------------------
 1147               	#include "variables.inc" 
   1               	
   2               	;----------------------------------------------------------------------
   3               	;
   4               	;    SRAM for user start at 0x060, 
   5               	;    forth reserves 0x060 to 0x0BF, about 48 words
   6               	;    user  variables starts at 0x0C0
   7               	;
   8               	;    Better Save Space.' Since the BSS segment only holds variables that don't have any value yet,
   9               	;
  10               	;----------------------------------------------------------------------
  11               	;
  12               	;    puts literal (word) into parameter stack
  13               	;
  14               	
  15               	;----------------------------------------------------------------------
  16               	;
  17               	;    ok  push address of "" into parameter stack
  18               	;
  19               	;    .s/.equ \+\(.\+\) ,.\+/TWIG 0, "\1"\r;ISVARIABLE \1\r/
  20               	
  21               	;
  22               	;----------------------------------------------------------------------
  23               	
  24               	;----------------------------------------------------------------------
  25               	;
  26               	;    creates forth variables, pushes the address
  27               	;
  28 0844 0000 0442 	TWIG 4, "BASE"
  28      4153 4500 
  28      0200 
  29               	BASE:
  30 084e 0000      	.word DOLIT
  31 0850 0000      	.word _BASE
  32 0852 0000      	.word EXIT
  33               	
  34 0854 0000 0354 	TWIG 3, "TIB"
  34      4942 0200 
  35               	TIB:
  36 085c 0000      	.word DOLIT
  37 085e 0000      	.word _TIB
  38 0860 0000      	.word EXIT
  39               	
  40 0862 0000 033E 	TWIG 3, ">IN"
  40      494E 0200 
  41               	TIN:
  42 086a 0000      	.word DOLIT
  43 086c 0000      	.word _TIN
  44 086e 0000      	.word EXIT
  45               	
  46 0870 0000 0343 	TWIG 3, "CUR"
  46      5552 0200 
  47               	CUR:
  48 0878 0000      	.word DOLIT
  49 087a 0000      	.word _CUR
  50 087c 0000      	.word EXIT
  51               	
  52 087e 0000 0343 	TWIG 3, "CSP"
  52      5350 0200 
  53               	CSP:
  54 0886 0000      	.word DOLIT
  55 0888 0000      	.word _CSP
  56 088a 0000      	.word EXIT
  57               	
  58 088c 0000 0743 	TWIG 7, "CONTEXT"
  58      4F4E 5445 
  58      5854 0200 
  59               	CONTEXT:
  60 0898 0000      	.word DOLIT
  61 089a 0000      	.word _CONTEXT
  62 089c 0000      	.word EXIT
  63               	
  64 089e 0000 0743 	TWIG 7, "CURRENT"
  64      5552 5245 
  64      4E54 0200 
  65               	CURRENT:
  66 08aa 0000      	.word DOLIT
  67 08ac 0000      	.word _CURRENT
  68 08ae 0000      	.word EXIT
  69               	
  70 08b0 0000 0748 	TWIG 7, "HANDLER"
  70      414E 444C 
  70      4552 0200 
  71               	HANDLER:
  72 08bc 0000      	.word DOLIT
  73 08be 0000      	.word _HANDLER
  74 08c0 0000      	.word EXIT
  75               	
  76 08c2 0000 0348 	TWIG 3, "HLD"
  76      4C44 0200 
  77               	HLD:
  78 08ca 0000      	.word DOLIT
  79 08cc 0000      	.word _HLD
  80 08ce 0000      	.word EXIT
  81               	
  82 08d0 0000 0453 	TWIG 4, "SPAN"
  82      5041 4E00 
  82      0200 
  83               	SPAN:
  84 08da 0000      	.word DOLIT
  85 08dc 0000      	.word _SPAN
  86 08de 0000      	.word EXIT
  87               	
  88 08e0 0000 0353 	TWIG 3, "SP0"
  88      5030 0200 
  89               	SPZ:
  90 08e8 0000      	.word DOLIT
  91 08ea 0000      	.word _SP0
  92 08ec 0000      	.word EXIT
  93               	
  94 08ee 0000 0352 	TWIG 3, "RP0"
  94      5030 0200 
  95               	RPZ:
  96 08f6 0000      	.word DOLIT
  97 08f8 0000      	.word _RP0
  98 08fa 0000      	.word EXIT
  99               	
 100 08fc 0000 0255 	TWIG 2, "UP"
 100      5000 0200 
 101               	UP:
 102 0904 0000      	.word DOLIT
 103 0906 0000      	.word _UP
 104 0908 0000      	.word EXIT
 105               	
 106 090a 0000 0243 	TWIG 2, "CP"
 106      5000 0200 
 107               	CP:
 108 0912 0000      	.word DOLIT
 109 0914 2900      	.word _CP
 110 0916 0000      	.word EXIT
 111               	
 112 0918 0000 0553 	TWIG 5, "STATE"
 112      5441 5445 
 112      0200 
 113               	STATE:
 114 0922 0000      	.word DOLIT
 115 0924 0000      	.word _STATE
 116 0926 0000      	.word EXIT
 117               	
 118 0928 0000 0554 	TWIG 5, "TIMER"
 118      494D 4552 
 118      0200 
 119               	TIMER:
 120 0932 0000      	.word DOLIT
 121 0934 0000      	.word _TIMER
 122 0936 0000      	.word EXIT
 123               	
 124 0938 0000 044C 	TWIG 4, "LAST"
 124      4153 5400 
 124      0200 
 125               	LAST:
 126 0942 0000      	.word DOLIT
 127 0944 0000      	.word _LAST
 128 0946 0000      	.word EXIT
 129               	
 130               	.section .data
 131               	.global variables
 132               	#.org    0x0060
 133               	variables:
 134               	
 135 0000 0100      	_TIMER: .word 1      ;     16 bit counter miliseconds, linked to timer0 interrupt
 136 0002 0100      	_RANDW: .word 1      ;     16 bit seed for randow recursive
 137               	
 138 0004 0100      	_HLD: .word 1        ;    pointer to buffer for number convertions
 139 0006 0100      	_SPAN: .word 1       ;    number of characters in TIB
 140 0008 0100      	_TIN: .word 1        ;     >IN     next character to be interpreted in TIB
 141 000a 0100      	_TIH: .word 1        ;    #TIB     number of characters in TIB
 142 000c 0100      	_TIB: .word 1        ;     'TIB    start terminal input buffer
 143               	
 144 000e 0100      	_BASE: .word 1       ;     base for show numbers
 145 0010 0100      	_CONTEXT: .word 1    ;    pointer to name field of last word in dictionary
 146 0012 0100      	_CURRENT: .word 1    ;    pointer to name field of last word in vocaburary
 147 0014 0100      	_CP: .word 1         ;    pointer to top free vocabulary
 148 0016 0100      	_UP: .word 1         ;     pointer to free user sram
 149 0018 0100      	_LAST: .word 1       ;    pointer to name field of last word
 150 001a 0100      	_STATE: .word 1      ;    state of $interpreter or $compiler
 151               	
 152 001c 0100      	_SP0: .word 1        ;     parameter stack
 153 001e 0100      	_RP0: .word 1        ;    return stack
 154               	
 155 0020 0100      	_TTEVAL: .word 1     ;    reference to eval 
 156 0022 0100      	_TTABORT: .word 1    ;    reference to abort
 157 0024 0100      	_TTKEYQM: .word 1    ;    reference to key?
 158 0026 0100      	_TTEMITQM: .word 1   ;    reference to emit?
 159               	
 160 0028 0100      	_CUR: .word 1        ;     current postion in TIB 
 161 002a 0100      	_CSP: .word 1        ;
 162               	
 163 002c 0100      	_HANDLER: .word 1    ;    currenter handler for ?
 164               	
 1148               	
 1149               	;----------------------------------------------------------------------
 1150               	#include "twigs.inc" 
   1               	
   2               	;----------------------------------------------------------------------
   3               	;	eforth	ok 
   4               	;
   5 002e 0000 012C 	TWIG 1, ","
   5      0200 
   6               	COMMA: 
   7 0034 0000 0000 	.word   HERE, DUP, CELLPLUS, CP, TO, TO, EXIT
   7      0000 0000 
   7      0000 0000 
   7      0000 
   8               	
   9               	;----------------------------------------------------------------------
  10               	;	: .word  VARIABLE CREATE  0 , ;
  11 0042 0000 0856 	TWIG 8, "VARIABLE"
  11      4152 4941 
  11      424C 4500 
  11      0200 
  12               	VARIABLE: 
  13 0050 0000 0000 	.word   CREATE, LITERAL, 0x0000, COMMA, EXIT
  13      0000 0000 
  13      0000 
  14               	
  15               	;----------------------------------------------------------------------
  16               	;
  17 005a 0000 0541 	TWIG 5, "ALLOT"
  17      4C4C 4F54 
  17      0200 
  18 0064 0000 0000 	ALLOT: .word   LITERAL, CP, PLUSTO, EXIT
  18      0000 0000 
  19               	
  20               	;----------------------------------------------------------------------
  21               	;
  22 006c 0000 0448 	TWIG 4, "HERE"
  22      4552 4500 
  22      0200 
  23 0076 0000 0000 	HERE: .word   LITERAL, CP, AT, EXIT
  23      0000 0000 
  24               	
  25               	;----------------------------------------------------------------------
  26               	;
  27 007e 0000 0350 	TWIG 3, "PAD"
  27      4144 0200 
  28 0086 0000 0000 	PAD: .word   HERE, LITERAL, BUFFER_SIZE, PLUS, EXIT
  28      0000 0000 
  28      0000 
  29               	
  30               	;----------------------------------------------------------------------
  31               	;
  32 0090 0000 0543 	TWIG 5, "COUNT"
  32      4F55 4E54 
  32      0200 
  33 009a 0000 0000 	COUNT: .word   DUP, ONEPLUS, SWAP, CAT, EXIT
  33      0000 0000 
  33      0000 
  34               	
  35               	;----------------------------------------------------------------------
  36 00a4 0000 054B 	TWIG 5, "KEY"
  36      4559 0200 
  37 00ac 0000 0000 	KEY: .word   KEYQM, QMBRANCH, KEY, EXIT	
  37      0000 0000 
  38               	
  39               	;----------------------------------------------------------------------
  40 00b4 0000 0545 	TWIG 5, "EMIT"
  40      4D49 5402 
  41 00bc 0000 0000 	EMIT: .word   EMITQM, QMBRANCH, EMIT, EXIT	
  41      0000 0000 
  42               	
  43               	;----------------------------------------------------------------------
  44 00c4 0000 0543 	TWIG 5, "CR"
  44      5202 
  45 00ca 0000 0000 	CREMIT: .word   CR, EMIT, LF, EMIT, EXIT		
  45      0000 0000 
  45      0000 
  46               	
  47               	;----------------------------------------------------------------------
  48 00d4 0000 0542 	TWIG 5, "BL"
  48      4C02 
  49 00da 0000 0000 	BLEMIT: .word   BL, EMIT, EXIT		
  49      0000 
  50               	
  51               	;----------------------------------------------------------------------
  52 00e0 0000 0A49 	TWIG 10, "IMMEDIATE?"
  52      4D4D 4544 
  52      4941 5445 
  52      3F00 0200 
  53 00f0 0000 8000 	IMMEDIATEQM: .word   LITERAL, F_IMMEDIATE, ZEROEQ, QMBRANCH, FTRUE, FFALSE, EXIT		
  53      0000 0000 
  53      0000 0000 
  53      0000 
  54               	
  55               	;----------------------------------------------------------------------
  56               	;	COMPILE?
  57 00fe 0000 0843 	TWIG 8, "COMPILE?"
  57      4F4D 5049 
  57      4C45 3F00 
  57      0200 
  58 010c 0000 4000 	COMPILEQM: .word   LITERAL, F_COMPILE, ZEROEQ, QMBRANCH, FTRUE, FFALSE, EXIT		
  58      0000 0000 
  58      0000 0000 
  58      0000 
  59               	
  60               	;----------------------------------------------------------------------
  61               	;	HIDDEN?
  62 011a 0000 0748 	TWIG 7, "HIDDEN?"
  62      4944 4445 
  62      4E3F 0200 
  63 0126 0000 2000 	HIDDEN: .word   LITERAL, F_HIDDEN, ZEROEQ, QMBRANCH, FTRUE, FFALSE, EXIT
  63      0000 0000 
  63      0000 0000 
  63      0000 
  64               	
  65               	
  66               	;----------------------------------------------------------------------
  67               	; forth2012
  68               	;	but only ASCII, not UTF-8 aka CHAR
  69               	;
  70 0134 0000 0554 	TWIG 5, "TYPE"
  70      5950 4502 
  71 013c 0000 0000 	TYPE: .word   DUP, QMBRANCH, _TYPE1, OVER, CAT, EMIT, ONEMINUS, SWAP, ONEPLUS, SWAP, BRANCH, DUP	
  71      0000 0000 
  71      0000 0000 
  71      0000 0000 
  71      0000 0000 
  72 0154 0000 0000 	_TYPE1: .word   TWODROP, EXIT		
  73               	
  74               	;----------------------------------------------------------------------
  75               	; forth2012
  76               	;	but only ASCII, not UTF-8 aka CHAR
  77               	;
  78 0158 0000 0545 	TWIG 5, "EXPECT"
  78      5850 4543 
  78      5402 
  79 0162 0000 0000 	EXPECT: .word   DUP, QMBRANCH, _EXPECT1, OVER, CAT, EMIT, ONEMINUS, SWAP, ONEPLUS, SWAP, BRANCH, DU
  79      0000 0000 
  79      0000 0000 
  79      0000 0000 
  79      0000 0000 
  80 017a 0000 0000 	_EXPECT1: .word   TWODROP, EXIT		
  81               	
  82               	;----------------------------------------------------------------------
  83               	;	ok	[	state is execute
  84 017e 0000 015B 	TWIG 1, "["		
  84      0200 
  85 0184 0000 0000 	ISEXEC: .word   LITERAL, FFALSE, STATE, TO, EXIT
  85      0000 0000 
  85      0000 
  86               	
  87               	;----------------------------------------------------------------------
  88               	;	ok	]	state is compile
  89 018e 0000 015D 	TWIG 1, "]"
  89      0200 
  90 0194 0000 0000 	ISCOMP: .word   LITERAL, FTRUE, STATE, TO, EXIT
  90      0000 0000 
  90      0000 
  91               	
  92               	;----------------------------------------------------------------------
  93               	;
  94               	;	define base constants
  95               	;
  96               			ONE	= 1
  97               			TWO = 2
  98               			SIX = 6
  99               			OCT = 8
 100               			TEN = 10
 101               			DUO = 12
 102               			HEX = 16
 103               	
 104               	;----------------------------------------------------------------------
 105               	; OCTAL		;	0	\0	null
 106 019e 0000 034F 	TWIG 3, "OCT"
 106      4354 0200 
 107 01a6 0000 0800 	.word  LITERAL, 0x0008, BASE, TO, EXIT
 107      0000 0000 
 107      0000 
 108               	
 109               	;----------------------------------------------------------------------
 110               	; DECIMAL		;	0	\0	null
 111 01b0 0000 0344 	TWIG 3, "DEC"
 111      4543 0200 
 112 01b8 0000 0A00 	.word  LITERAL, 0x000A, BASE, TO, EXIT
 112      0000 0000 
 112      0000 
 113               	
 114               	;----------------------------------------------------------------------
 115               	; HEXADECIMAL		;	0	\0	null
 116 01c2 0000 0348 	TWIG 3, "HEX"
 116      4558 0200 
 117 01ca 0000 1000 	.word  LITERAL, 0x0010, BASE, TO, EXIT
 117      0000 0000 
 117      0000 
 118               	
 119               	;----------------------------------------------------------------------
 120 01d4 0000 0544 	TWIG 5, "DIGIT"
 120      4947 4954 
 120      0200 
 121 01de 0000 0900 	.word LITERAL, 0x0009, OVER, LTHAN, LITERAL, 0x0007, AND, PLUS, LITERAL, '0', PLUS, EXIT
 121      0000 0000 
 121      0000 0700 
 121      0000 0000 
 121      0000 3000 
 122               	
 123               	;----------------------------------------------------------------------
 124 01f6 0000 023C 	TWIG 2, "<#"
 124      2300 0200 
 125 01fe 0000 0000 	BDIGS: .word   PAD, HLD, TO, EXIT
 125      0000 0000 
 126               	
 127               	;----------------------------------------------------------------------
 128 0206 0000 0542 	TWIG 5, "BEGIN"
 128      4547 494E 
 128      0200 
 129 0210 0000 0000 	.word IMMEDIATE, HERE , EXIT
 129      0000 
 130               	
 131               	;----------------------------------------------------------------------
 132 0216 0000 0544 	TWIG 5, "DO"
 132      4F02 
 133 021c 0000 0000 	.word IMMEDIATE, POSTPONE, TWOTOR, HERE , EXIT
 133      0000 0000 
 133      0000 
 134               	
 135               	;----------------------------------------------------------------------
 136 0226 0000 013A 	TWIG 1, ":"
 136      0200 
 137               	COLON: 
 138 022c 0000 0000 	.word   ISCOMP, BEGIN, BL, FIND, DUP, IF, FFALSE, EQUAL, IF, EXECUTE, STACKQ, ABORTQT
 138      0000 0000 
 138      0000 0000 
 138      0000 0000 
 138      0000 0000 
 139 0244 2073 7461 	.ascii	" stack empty \"" 
 139      636B 2065 
 139      6D70 7479 
 139      2022 
 140 0252 0000 0000 	.word   ELSE, COMMA, THEN, ELSE, EXIT
 140      0000 0000 
 140      0000 
 141               	
 142               	;----------------------------------------------------------------------
 143 025c 0000 013B 	TWIG 1, ";"
 143      0200 
 144 0262 0000 0000 	.word POSTPONE, EXIT, REVEAL, POSTPONE, OPENCOL, EXIT
 144      0000 0000 
 144      0000 0000 
 145               	
 146               	;----------------------------------------------------------------------
 147               	;	eforth	ok 
 148               	;
 149 026e 0000 0543 	TWIG 5, "CATCH"
 149      4154 4348 
 149      0200 
 150               	CATCH: 
 151 0278 0000 0000 	.word   SPAT, GTR, HANDLER, AT, GTR, RPAT, HANDLER, TO, EXECUTE, RGT, HANDLER, TO, RGT, DROP, FFALS
 151      0000 0000 
 151      0000 0000 
 151      0000 0000 
 151      0000 0000 
 152               	
 153               	;----------------------------------------------------------------------
 154               	;	eforth	ok 
 155               	;
 156 0298 0000 0554 	TWIG 5, "THROW"
 156      4852 4F57 
 156      0200 
 157               	THROW: 
 158 02a2 0000 0000 	.word   HANDLER, AT, PSTO, RGT, HANDLER, TO, RGT, SWAP, RGT, SPTO, DROP, RGT, EXIT
 158      0000 0000 
 158      0000 0000 
 158      0000 0000 
 158      0000 0000 
 159               	
 160               	;----------------------------------------------------------------------
 161               	;	eforth	ok 
 162               	;
 163 02bc 0000 0127 	TWIG 1, "'"
 163      0200 
 164               	TICK: 
 165 02c2 0000 0000 	.word   TOKEN, NAMEQ, QMBRANCH, EXIT, THROW, EXIT
 165      0000 0000 
 165      0000 0000 
 166               	
 167               	;----------------------------------------------------------------------
 168               	;	eforth	ok 
 169               	;
 170 02ce 0000 045B 	TWIG 4, "[COMPILE]"
 170      434F 4D50 
 170      494C 455D 
 170      0002 
 171               	COMPILEMD: 
 172 02dc 0000 0000 	.word   RGT, DUP, AT, COMMA, CELLPLUS, RGT, PLUSTO , EXIT
 172      0000 0000 
 172      0000 0000 
 172      0000 0000 
 173               	
 174               	;----------------------------------------------------------------------
 175               	;	
 176               	;	create a word in dictionary, uses next word in TIB pointed by
 177               	;
 178 02ec 0000 0443 	TWIG 4, "CREATE"
 178      5245 4154 
 178      4500 0200 
 179 02f8 0000      	.word EXIT
 180               	
 181               	;----------------------------------------------------------------------
 182               	;	
 183               	;	create a word in dictionary, uses next word in TIB pointed by
 184               	;
 185 02fa 0000 0444 	TWIG 4, "DOES>"
 185      4F45 533E 
 185      0002 
 186 0304 0000      	.word EXIT
 187               	
 188               	;----------------------------------------------------------------------
 189               	;
 190 0306 0000 0443 	TWIG 4, "CONSTANT"
 190      4F4E 5354 
 190      414E 5400 
 190      0200 
 191 0314 0000 0000 	.word CREATE, COMMA, DOES, AT, EXIT
 191      0000 0000 
 191      0000 
 192               	
 193               	;----------------------------------------------------------------------
 194               	;
 195 031e 0000 0456 	TWIG 4, "VARIABLE"
 195      4152 4941 
 195      424C 4500 
 195      0200 
 196 032c 0000 0000 	.word CREATE, LITERAL, 0x0000, COMMA, EXIT
 196      0000 0000 
 196      0000 
 197               	
 198               	;-----------------------------------------------------------------
 199               	; eforth
 200               	;
 201 0336 0000 0464 	TWIG 4, "doVAR"
 201      6F56 4152 
 201      0002 
 202               	doVAR: 
 203 0340 0000      	.word   EXIT
 204               	
 205               	;----------------------------------------------------------------------
 206               	; eforth
 207               	;
 208 0342 0000 0464 	TWIG 4, "doVOC"
 208      6F56 4F43 
 208      0002 
 209               	doVOC: 
 210 034c 0000      	.word   EXIT
 211               	
 212               	;----------------------------------------------------------------------
 213               	; eforth
 214               	;
 215 034e 0000 0464 	TWIG 4, "doUSER"
 215      6F55 5345 
 215      5200 0200 
 216               	doUSER: 
 217 035a 0000      	.word   EXIT
 218               	
 219               	;----------------------------------------------------------------------
 220               	; eforth
 221               	;
 222 035c 0000 0446 	TWIG 4, "FORTH"
 222      4F52 5448 
 222      0002 
 223               	FORTH: 
 224 0366 0000      	.word   EXIT
 225               	
 1151               	
 1152               	;----------------------------------------------------------------------
DEFINED SYMBOLS
         equates.inc:7      *ABS*:000000000000003f __SREG__
         equates.inc:8      *ABS*:000000000000003e __SP_H__
         equates.inc:9      *ABS*:000000000000003d __SP_L__
         equates.inc:14     *ABS*:000000000000045f SRAM_END
         equates.inc:15     *ABS*:0000000000000060 SRAM_START
         equates.inc:16     *ABS*:00000000000000c0 USER_START
         equates.inc:21     *ABS*:0000000000000028 SPU_SIZE
         equates.inc:26     *ABS*:0000000000000040 PSP_SIZE
         equates.inc:27     *ABS*:0000000000000030 RSP_SIZE
         equates.inc:28     *ABS*:0000000000000050 TIB_SIZE
         equates.inc:29     *ABS*:0000000000000054 PAD_SIZE
         equates.inc:34     *ABS*:000000000000045f SPP_TOP
         equates.inc:35     *ABS*:0000000000000437 RSP_TOP
         equates.inc:36     *ABS*:0000000000000407 PSP_TOP
         equates.inc:37     *ABS*:00000000000003c7 PSP_END
         equates.inc:42     *ABS*:0000000000000377 TIB_TOP
         equates.inc:47     *ABS*:0000000000000323 PAD_TOP
         equates.inc:52     *ABS*:0000000000000080 F_IMMEDIATE
         equates.inc:53     *ABS*:0000000000000040 F_COMPILE
         equates.inc:54     *ABS*:0000000000000020 F_HIDDEN
         equates.inc:56     *ABS*:000000000000001f F_MASKZ
         equates.inc:57     *ABS*:00000000000000e0 F_MASKO
         equates.inc:62     *ABS*:0000000000000010 BASEE
         equates.inc:67     *ABS*:0000000000000002 CELL_SIZE
         equates.inc:72     *ABS*:00000000000000c8 _INIT
          macros.inc:71     *ABS*:0000000000000100 version
           twigs.inc:222    .data:000000000000035c _LINK
           twigs.inc:222    .data:000000000000035c _THIS
          macros.inc:84     *ABS*:0000000000000000 isNOOP
          macros.inc:85     *ABS*:0000000000000001 isLEAF
          macros.inc:86     *ABS*:0000000000000002 isTWIG
            boot.inc:8      .text:0000000000000000 main
            boot.inc:107    .text:0000000000000050 RESET
            boot.inc:48     .text:0000000000000026 TIM0_OVF
       variables.inc:119    .text:0000000000000932 TIMER
               u2f.S:113    .text:000000000000006a BYE
               u2f.S:131    .text:000000000000008a ABORT
               u2f.S:142    .text:000000000000009a QUIT
               u2f.S:157    .text:00000000000000aa NOOP
               u2f.S:240    .text:000000000000019e CORE
            uart.inc:9      .text:00000000000000b4 IOYO
            uart.inc:29     .text:00000000000000d8 KEYQM
            uart.inc:30     .text:00000000000000d8 RXAT
          stacks.inc:127    .text:00000000000002fa FFALSE
          stacks.inc:138    .text:000000000000030a FTRUE
            uart.inc:43     .text:00000000000000f0 EMITQM
            uart.inc:44     .text:00000000000000f0 TXTO
               u2f.S:167    .text:0000000000000108 DOLIT
               u2f.S:177    .text:000000000000011e DOVAR
               u2f.S:185    .text:000000000000012a DOCON
               u2f.S:194    .text:0000000000000138 QMBRANCH
               u2f.S:203    .text:0000000000000152 BRANCH
               u2f.S:230    .text:000000000000018e GOES
               u2f.S:211    .text:0000000000000162 EXEC
               u2f.S:219    .text:0000000000000176 EXIT
               u2f.S:227    .text:0000000000000186 ENTER
               u2f.S:810    .text:000000000000063e _CORE
               u2f.S:267    .text:00000000000001ba PLUSTO
          stacks.inc:146    .text:000000000000031a TWODROP
               u2f.S:282    .text:00000000000001d8 TO
               u2f.S:287    .text:00000000000001e0 _TO1
               u2f.S:294    .text:00000000000001ea CTO
               u2f.S:303    .text:00000000000001f8 AT
               u2f.S:308    .text:0000000000000200 _AT1
               u2f.S:315    .text:000000000000020a CAT
          stacks.inc:4      .text:000000000000021c RAT
          stacks.inc:14     .text:0000000000000230 RGT
          stacks.inc:23     .text:0000000000000244 GTR
          stacks.inc:88     .text:00000000000002b8 DROP
          stacks.inc:30     .text:0000000000000252 RSAT
          stacks.inc:99     .text:00000000000002ca PUSHS
          stacks.inc:37     .text:000000000000025e RSTO
          stacks.inc:44     .text:000000000000026a PSAT
          stacks.inc:51     .text:0000000000000276 PSTO
          stacks.inc:58     .text:0000000000000282 QMDUP
          stacks.inc:63     .text:000000000000028a _QMDUP1
          stacks.inc:69     .text:0000000000000294 DUP
          stacks.inc:77     .text:00000000000002a6 SWAP
          stacks.inc:109    .text:00000000000002dc ROT
          stacks.inc:117    .text:00000000000002ec OVER
          stacks.inc:126    .text:00000000000002fa ZERO
          stacks.inc:137    .text:000000000000030a ONENEG
          stacks.inc:154    .text:000000000000032e TWODUP
          stacks.inc:162    .text:0000000000000342 TWOSWAP
               u2f.S:330    .text:000000000000036a ONEPLUS
               u2f.S:340    .text:000000000000037a ONEMINUS
            bits.inc:5      .text:0000000000000390 BITSCLEAR
               u2f.S:392    .text:000000000000041c AND
            bits.inc:13     .text:00000000000003a2 BITSSET
            bits.inc:21     .text:00000000000003b8 BITSTOGGLE
               u2f.S:352    .text:00000000000003c6 ZEROGT
               u2f.S:357    .text:00000000000003d4 _ZEROGT1
               u2f.S:362    .text:00000000000003de ZEROLT
               u2f.S:367    .text:00000000000003ec _ZEROLT1
               u2f.S:373    .text:00000000000003f6 ZEROEQ
               u2f.S:378    .text:0000000000000404 _ZEROEQ1
               u2f.S:384    .text:000000000000040e XOR
               u2f.S:400    .text:000000000000042a OR
               u2f.S:408    .text:0000000000000436 PLUS
               u2f.S:416    .text:0000000000000442 MINUS
               u2f.S:424    .text:000000000000044e LTHAN
               u2f.S:429    .text:0000000000000456 _LTHAN1
               u2f.S:435    .text:000000000000045e GTHAN
               u2f.S:440    .text:0000000000000466 _GTHAN1
               u2f.S:446    .text:000000000000046e EQUAL
               u2f.S:451    .text:0000000000000476 _EQUAL1
               u2f.S:457    .text:0000000000000480 INV
               u2f.S:465    .text:000000000000048e NEG
               u2f.S:473    .text:000000000000049c SHL
               u2f.S:481    .text:00000000000004aa SHR
               u2f.S:489    .text:00000000000004b8 UPLUS
               u2f.S:503    .text:00000000000004ce CMOVE
               u2f.S:526    .text:00000000000004de _CMOVE1
               u2f.S:539    .text:00000000000004e8 _CMOVE2
               u2f.S:552    .text:0000000000000500 CMOVEGT
               u2f.S:585    .text:000000000000051c _CMOVEGT1
               u2f.S:597    .text:0000000000000526 _CMOVEGT2
               u2f.S:613    .text:000000000000053e ALLIGN
               u2f.S:626    .text:0000000000000554 CELLSZ
               u2f.S:636    .text:0000000000000564 CELLS
               u2f.S:644    .text:0000000000000570 CELLPLUS
               u2f.S:655    .text:0000000000000582 CELLMINUS
               u2f.S:675    .text:0000000000000594 RND
       variables.inc:136    .data:0000000000000002 _RANDW
               u2f.S:701    .text:00000000000005ac JUMPS
               u2f.S:853    .text:000000000000066a DSHL
               u2f.S:843    .text:0000000000000658 DSHR
               u2f.S:924    .text:00000000000006b4 SDIV
               u2f.S:1003   .text:0000000000000710 SMUL
               u2f.S:866    .text:0000000000000680 UMBYMOD
               u2f.S:1051   .text:0000000000000740 UMUL
               u2f.S:890    .text:0000000000000684 div16u
               u2f.S:893    .text:000000000000068a d16u_1
               u2f.S:905    .text:0000000000000698 d16u_2
               u2f.S:897    .text:0000000000000692 d16ures
               u2f.S:914    .text:00000000000006aa d16u_3
               u2f.S:952    .text:00000000000006b8 div16s
               u2f.S:960    .text:00000000000006c8 d16s_1
               u2f.S:966    .text:00000000000006d4 d16s_2
               u2f.S:970    .text:00000000000006da d16s_3
               u2f.S:986    .text:00000000000006f4 d16s_5
               u2f.S:980    .text:00000000000006ee d16s_4
               u2f.S:981    .text:00000000000006ee d16sres
               u2f.S:995    .text:0000000000000706 d16s_6
               u2f.S:1025   .text:0000000000000714 mpy16s
               u2f.S:1028   .text:000000000000071a m16s_1
               u2f.S:1031   .text:0000000000000720 m16s_2
               u2f.S:1041   .text:0000000000000734 m16sres
               u2f.S:1075   .text:0000000000000744 mpy16u
               u2f.S:1081   .text:000000000000074e m16u_1
               u2f.S:1084   .text:0000000000000754 noad8
               u2f.S:1090   .text:0000000000000760 m16ures
               u2f.S:1115   .text:0000000000000764 bin16_ascii
               u2f.S:1118   .text:0000000000000766 _bcd1
               u2f.S:1124   .text:0000000000000770 _bcd2
               u2f.S:1130   .text:000000000000077a _bcd3
               u2f.S:1136   .text:0000000000000784 _bcd4
       constants.inc:45     *ABS*:0000000000000000 NIL
       constants.inc:46     *ABS*:0000000000000020 _BL
       constants.inc:47     *ABS*:0000000000000008 _BS
       constants.inc:48     *ABS*:0000000000000009 _TB
       constants.inc:49     *ABS*:000000000000000a _LF
       constants.inc:50     *ABS*:000000000000000b _VT
       constants.inc:51     *ABS*:000000000000000c _FF
       constants.inc:52     *ABS*:000000000000000d _CR
       constants.inc:53     *ABS*:0000000000000018 _CN
       constants.inc:54     *ABS*:000000000000001b _ES
       constants.inc:57     *ABS*:0000000000000022 _QK
       constants.inc:58     *ABS*:0000000000000028 _OP
       variables.inc:147    .data:0000000000000014 _CP
       constants.inc:60     *ABS*:000000000000005c _BH
       constants.inc:61     *ABS*:000000000000005f _US
       constants.inc:66     .text:0000000000000796 NULL
       constants.inc:84     .text:00000000000007a4 BS
       constants.inc:93     .text:00000000000007b2 TB
       constants.inc:102    .text:00000000000007c0 LF
       constants.inc:129    .text:00000000000007ce CR
       constants.inc:147    .text:00000000000007d4 ES
       constants.inc:156    .text:00000000000007e2 BL
       constants.inc:170    .text:00000000000007f6 ROULETTE
       variables.inc:29     .text:000000000000084e BASE
       variables.inc:144    .data:000000000000000e _BASE
       variables.inc:35     .text:000000000000085c TIB
       variables.inc:142    .data:000000000000000c _TIB
       variables.inc:41     .text:000000000000086a TIN
       variables.inc:140    .data:0000000000000008 _TIN
       variables.inc:47     .text:0000000000000878 CUR
       variables.inc:160    .data:0000000000000028 _CUR
       variables.inc:53     .text:0000000000000886 CSP
       variables.inc:161    .data:000000000000002a _CSP
       variables.inc:59     .text:0000000000000898 CONTEXT
       variables.inc:145    .data:0000000000000010 _CONTEXT
       variables.inc:65     .text:00000000000008aa CURRENT
       variables.inc:146    .data:0000000000000012 _CURRENT
       variables.inc:71     .text:00000000000008bc HANDLER
       variables.inc:163    .data:000000000000002c _HANDLER
       variables.inc:77     .text:00000000000008ca HLD
       variables.inc:138    .data:0000000000000004 _HLD
       variables.inc:83     .text:00000000000008da SPAN
       variables.inc:139    .data:0000000000000006 _SPAN
       variables.inc:89     .text:00000000000008e8 SPZ
       variables.inc:152    .data:000000000000001c _SP0
       variables.inc:95     .text:00000000000008f6 RPZ
       variables.inc:153    .data:000000000000001e _RP0
       variables.inc:101    .text:0000000000000904 UP
       variables.inc:148    .data:0000000000000016 _UP
       variables.inc:107    .text:0000000000000912 CP
       variables.inc:113    .text:0000000000000922 STATE
       variables.inc:150    .data:000000000000001a _STATE
       variables.inc:135    .data:0000000000000000 _TIMER
       variables.inc:125    .text:0000000000000942 LAST
       variables.inc:149    .data:0000000000000018 _LAST
       variables.inc:133    .data:0000000000000000 variables
       variables.inc:141    .data:000000000000000a _TIH
       variables.inc:155    .data:0000000000000020 _TTEVAL
       variables.inc:156    .data:0000000000000022 _TTABORT
       variables.inc:157    .data:0000000000000024 _TTKEYQM
       variables.inc:158    .data:0000000000000026 _TTEMITQM
           twigs.inc:6      .data:0000000000000034 COMMA
           twigs.inc:23     .data:0000000000000076 HERE
           twigs.inc:12     .data:0000000000000050 VARIABLE
           twigs.inc:18     .data:0000000000000064 ALLOT
           twigs.inc:28     .data:0000000000000086 PAD
           twigs.inc:33     .data:000000000000009a COUNT
           twigs.inc:37     .data:00000000000000ac KEY
           twigs.inc:41     .data:00000000000000bc EMIT
           twigs.inc:45     .data:00000000000000ca CREMIT
           twigs.inc:49     .data:00000000000000da BLEMIT
           twigs.inc:53     .data:00000000000000f0 IMMEDIATEQM
           twigs.inc:58     .data:000000000000010c COMPILEQM
           twigs.inc:63     .data:0000000000000126 HIDDEN
           twigs.inc:71     .data:000000000000013c TYPE
           twigs.inc:72     .data:0000000000000154 _TYPE1
           twigs.inc:79     .data:0000000000000162 EXPECT
           twigs.inc:80     .data:000000000000017a _EXPECT1
           twigs.inc:85     .data:0000000000000184 ISEXEC
           twigs.inc:90     .data:0000000000000194 ISCOMP
           twigs.inc:96     *ABS*:0000000000000001 ONE
           twigs.inc:97     *ABS*:0000000000000002 TWO
           twigs.inc:98     *ABS*:0000000000000006 SIX
           twigs.inc:99     *ABS*:0000000000000008 OCT
           twigs.inc:100    *ABS*:000000000000000a TEN
           twigs.inc:101    *ABS*:000000000000000c DUO
           twigs.inc:102    *ABS*:0000000000000010 HEX
           twigs.inc:125    .data:00000000000001fe BDIGS
           twigs.inc:137    .data:000000000000022c COLON
           twigs.inc:150    .data:0000000000000278 CATCH
           twigs.inc:157    .data:00000000000002a2 THROW
           twigs.inc:164    .data:00000000000002c2 TICK
           twigs.inc:171    .data:00000000000002dc COMPILEMD
           twigs.inc:202    .data:0000000000000340 doVAR
           twigs.inc:209    .data:000000000000034c doVOC
           twigs.inc:216    .data:000000000000035a doUSER
           twigs.inc:223    .data:0000000000000366 FORTH

UNDEFINED SYMBOLS
CREATE
LITERAL
BUFFER_SIZE
IMMEDIATE
POSTPONE
TWOTOR
BEGIN
FIND
IF
EXECUTE
STACKQ
ABORTQT
ELSE
THEN
REVEAL
OPENCOL
SPAT
RPAT
SPTO
TOKEN
NAMEQ
DOES
